// Code generated by Icestudio 0.5.0-dev


module main #(
 parameter l1_mask = 32'hFE00_0000,
 parameter l2c_base = 32'h0000_0000,
 parameter l2p_base = 32'h0200_0000,
 parameter l2m_base = 32'h0400_0000,
 parameter l2w_base = 32'h0000_0000,
 parameter l2p_mask = 32'h0000_00F0,
 parameter flcfg_base = 32'h0000_0000,
 parameter gpio0_base = 32'h0000_0010,
 parameter uart0_base = 32'h0000_0020,
 parameter l2c_mask = 32'h0100_0000,
 parameter uart1_base = 32'h0000_0030,
 parameter brom_base = 32'h0000_0000,
 parameter xip_base = 32'h0100_0000,
 parameter l2w_mask = 32'hFFFF_00F0,
 parameter rgb_base = 32'h0600_0000,
 parameter seg_base = 32'h0600_0010,
 parameter vgac_base = 32'h0601_0000,
 parameter sdram_base = 32'h2000_0000,
 parameter vgac_mask = 32'hFFFF_0000,
 parameter sdram_mask = 32'hF000_0000,
 parameter boot_rom = "fw.mif"
) (
 input clk,
 input resetn,
 input ser_rx,
 input esp_rx,
 output flash_cs,
 output flash_clk,
 output [15:0] leds,
 output ser_tx,
 output esp_tx,
 output [2:0] rgb,
 output [3:0] segled_bsel,
 output [7:0] segled_ssel,
 output [7:0] vga_r,
 output vga_clk,
 output vga_hs,
 output vga_vs,
 output [7:0] vga_g,
 output [7:0] vga_b,
 output [0:0] vinit,
 inout [3:0] f_io
);
 localparam p50 = l1_mask;
 localparam p51 = l1_mask;
 localparam p52 = l1_mask;
 localparam p53 = l2c_base;
 localparam p54 = l2p_base;
 localparam p55 = l2m_base;
 localparam p56 = l2w_base;
 localparam p57 = l2w_base;
 localparam p58 = l2c_mask;
 localparam p59 = l2c_mask;
 localparam p60 = brom_base;
 localparam p61 = xip_base;
 localparam p62 = l2p_mask;
 localparam p63 = l2p_mask;
 localparam p64 = l2p_mask;
 localparam p65 = l2p_mask;
 localparam p66 = flcfg_base;
 localparam p67 = gpio0_base;
 localparam p68 = uart0_base;
 localparam p69 = uart1_base;
 localparam p70 = l2w_mask;
 localparam p71 = l2w_mask;
 localparam p72 = rgb_base;
 localparam p73 = seg_base;
 localparam p74 = vgac_base;
 localparam p75 = vgac_mask;
 localparam p76 = sdram_base;
 localparam p77 = sdram_mask;
 localparam p78 = boot_rom;
 wire w0;
 wire w1;
 wire [31:0] w2;
 wire [31:0] w3;
 wire [15:0] w4;
 wire w5;
 wire w6;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 wire [2:0] w12;
 wire [3:0] w13;
 wire [7:0] w14;
 wire w15;
 wire w16;
 wire w17;
 wire [7:0] w18;
 wire [7:0] w19;
 wire [7:0] w20;
 wire [2:0] w21;
 wire w22;
 wire [2:0] w23;
 wire w24;
 wire w25;
 wire w26;
 wire w27;
 wire w28;
 wire w29;
 wire w30;
 wire w31;
 wire w32;
 wire w33;
 wire w34;
 wire w35;
 wire w36;
 wire w37;
 wire w38;
 wire w39;
 wire w40;
 wire w41;
 wire w42;
 wire w43;
 wire w44;
 wire w45;
 wire w46;
 wire w47;
 wire w48;
 wire w49;
 wire w79;
 wire w80;
 wire w81;
 wire w82;
 wire w83;
 wire w84;
 wire w85;
 wire w86;
 wire w87;
 wire w88;
 wire w89;
 wire w90;
 wire w91;
 wire w92;
 wire [31:0] w93;
 wire [31:0] w94;
 wire [3:0] w95;
 wire [31:0] w96;
 wire w97;
 wire w98;
 wire [31:0] w99;
 wire [31:0] w100;
 wire [3:0] w101;
 wire [31:0] w102;
 wire w103;
 wire w104;
 wire [31:0] w105;
 wire [31:0] w106;
 wire [3:0] w107;
 wire [31:0] w108;
 wire w109;
 wire w110;
 wire [31:0] w111;
 wire [31:0] w112;
 wire [3:0] w113;
 wire [31:0] w114;
 wire w115;
 wire w116;
 wire [31:0] w117;
 wire [31:0] w118;
 wire [3:0] w119;
 wire [31:0] w120;
 wire w121;
 wire w122;
 wire [31:0] w123;
 wire [31:0] w124;
 wire [3:0] w125;
 wire [31:0] w126;
 wire w127;
 wire w128;
 wire w129;
 wire w130;
 wire [3:0] w131;
 wire [31:0] w132;
 wire [31:0] w133;
 wire [31:0] w134;
 wire w135;
 wire w136;
 wire w137;
 wire w138;
 wire [3:0] w139;
 wire [31:0] w140;
 wire [31:0] w141;
 wire [31:0] w142;
 wire w143;
 wire w144;
 wire w145;
 wire w146;
 wire [3:0] w147;
 wire [31:0] w148;
 wire [31:0] w149;
 wire [31:0] w150;
 wire w151;
 wire w152;
 wire w153;
 wire w154;
 wire [3:0] w155;
 wire [31:0] w156;
 wire [31:0] w157;
 wire [31:0] w158;
 wire w159;
 wire w160;
 wire w161;
 wire w162;
 wire [3:0] w163;
 wire [31:0] w164;
 wire [31:0] w165;
 wire [31:0] w166;
 wire w167;
 wire w168;
 wire w169;
 wire w170;
 wire [3:0] w171;
 wire [31:0] w172;
 wire [31:0] w173;
 wire [31:0] w174;
 wire w175;
 wire w176;
 wire [31:0] w177;
 wire [31:0] w178;
 wire [3:0] w179;
 wire [31:0] w180;
 wire w181;
 wire w182;
 wire [31:0] w183;
 wire [31:0] w184;
 wire [3:0] w185;
 wire [31:0] w186;
 wire w187;
 wire w188;
 wire [31:0] w189;
 wire [31:0] w190;
 wire [3:0] w191;
 wire [31:0] w192;
 wire w193;
 wire w194;
 wire [31:0] w195;
 wire [31:0] w196;
 wire [3:0] w197;
 wire [31:0] w198;
 wire w199;
 wire w200;
 wire w201;
 wire w202;
 wire [3:0] w203;
 wire [31:0] w204;
 wire [31:0] w205;
 wire [31:0] w206;
 wire w207;
 wire w208;
 wire w209;
 wire w210;
 wire [3:0] w211;
 wire [31:0] w212;
 wire [31:0] w213;
 wire [31:0] w214;
 wire w215;
 wire w216;
 wire [31:0] w217;
 wire [31:0] w218;
 wire [3:0] w219;
 wire [31:0] w220;
 assign w0 = resetn;
 assign leds = w4;
 assign flash_cs = w5;
 assign flash_clk = w6;
 assign ser_tx = w8;
 assign w9 = ser_rx;
 assign w10 = esp_rx;
 assign esp_tx = w11;
 assign rgb = w12;
 assign segled_bsel = w13;
 assign segled_ssel = w14;
 assign vga_clk = w15;
 assign vga_hs = w16;
 assign vga_vs = w17;
 assign vga_r = w18;
 assign vga_g = w19;
 assign vga_b = w20;
 assign w79 = clk;
 assign w80 = clk;
 assign w81 = clk;
 assign w82 = clk;
 assign w83 = clk;
 assign w84 = clk;
 assign w85 = clk;
 assign w86 = clk;
 assign w87 = clk;
 assign w88 = clk;
 assign w89 = clk;
 assign w90 = clk;
 assign w26 = w25;
 assign w27 = w25;
 assign w28 = w25;
 assign w29 = w25;
 assign w30 = w25;
 assign w31 = w25;
 assign w33 = w1;
 assign w34 = w1;
 assign w35 = w1;
 assign w36 = w1;
 assign w37 = w1;
 assign w38 = w1;
 assign w39 = w1;
 assign w40 = w1;
 assign w42 = w41;
 assign w43 = w41;
 assign w44 = w41;
 assign w45 = w41;
 assign w46 = w41;
 assign w47 = w41;
 assign w48 = w41;
 assign w49 = w41;
 PicoRV32_Core u_PicoRV32_Core_39 (
  .resetn(w1),
  .irq(w2),
  .clk(w79),
  .mem_valid(w175),
  .mem_ready(w176),
  .mem_addr(w177),
  .mem_wdata(w178),
  .mem_wstrb(w179),
  .mem_rdata(w180)
 );
 Reset_Sync u_Reset_Sync_40 (
  .ext_reset(w0),
  .resetn(w1),
  .clk(w80)
 );
 main_code_41 v9363ff (
  .irqo(w2)
 );
 PicoMem_SRAM_EG4_4KB #(
  .INIT_FILE(p78)
 ) u_PicoMem_SRAM_EG4_4KB_42 (
  .resetn(w33),
  .clk(w81),
  .mem_s_valid(w91),
  .mem_s_ready(w92),
  .mem_s_addr(w93),
  .mem_s_wdata(w94),
  .mem_s_wstrb(w95),
  .mem_s_rdata(w96)
 );
 PicoMem_SPI_Flash u_PicoMem_SPI_Flash_43 (
  .flash_csb(w5),
  .flash_clk(w6),
  .flash_dio(f_io),
  .resetn(w34),
  .clk(w82),
  .flash_mem_valid(w97),
  .flash_mem_ready(w98),
  .flash_mem_addr(w99),
  .flash_mem_wdata(w100),
  .flash_mem_wstrb(w101),
  .flash_mem_rdata(w102),
  .flash_cfg_valid(w103),
  .flash_cfg_ready(w104),
  .flash_cfg_addr(w105),
  .flash_cfg_wdata(w106),
  .flash_cfg_wstrb(w107),
  .flash_cfg_rdata(w108)
 );
 PicoMem_Mux_1_2 #(
  .PICOS0_ADDR_MASK(p58),
  .PICOS1_ADDR_MASK(p59),
  .PICOS0_ADDR_BASE(p60),
  .PICOS1_ADDR_BASE(p61)
 ) u_PicoMem_Mux_1_2_44 (
  .picos0_valid(w91),
  .picos0_ready(w92),
  .picos0_addr(w93),
  .picos0_wdata(w94),
  .picos0_wstrb(w95),
  .picos0_rdata(w96),
  .picos1_valid(w97),
  .picos1_ready(w98),
  .picos1_addr(w99),
  .picos1_wdata(w100),
  .picos1_wstrb(w101),
  .picos1_rdata(w102),
  .picom_valid(w181),
  .picom_ready(w182),
  .picom_addr(w183),
  .picom_wdata(w184),
  .picom_wstrb(w185),
  .picom_rdata(w186)
 );
 PicoMem_GPO u_PicoMem_GPO_45 (
  .out(w3),
  .resetn(w35),
  .clk(w83),
  .busin_valid(w109),
  .busin_ready(w110),
  .busin_addr(w111),
  .busin_wdata(w112),
  .busin_wstrb(w113),
  .busin_rdata(w114)
 );
 PicoMem_UART u_PicoMem_UART_46 (
  .ser_tx(w8),
  .ser_rx(w9),
  .resetn(w36),
  .clk(w84),
  .mem_s_valid(w115),
  .mem_s_ready(w116),
  .mem_s_addr(w117),
  .mem_s_wdata(w118),
  .mem_s_wstrb(w119),
  .mem_s_rdata(w120)
 );
 PicoMem_UART u_PicoMem_UART_47 (
  .ser_rx(w10),
  .ser_tx(w11),
  .resetn(w37),
  .clk(w85),
  .mem_s_valid(w121),
  .mem_s_ready(w122),
  .mem_s_addr(w123),
  .mem_s_wdata(w124),
  .mem_s_wstrb(w125),
  .mem_s_rdata(w126)
 );
 PicoMem_Mux_1_4 #(
  .PICOS0_ADDR_MASK(p62),
  .PICOS1_ADDR_MASK(p63),
  .PICOS2_ADDR_MASK(p64),
  .PICOS3_ADDR_MASK(p65),
  .PICOS0_ADDR_BASE(p66),
  .PICOS1_ADDR_BASE(p67),
  .PICOS2_ADDR_BASE(p68),
  .PICOS3_ADDR_BASE(p69)
 ) u_PicoMem_Mux_1_4_48 (
  .picos0_valid(w103),
  .picos0_ready(w104),
  .picos0_addr(w105),
  .picos0_wdata(w106),
  .picos0_wstrb(w107),
  .picos0_rdata(w108),
  .picos1_valid(w109),
  .picos1_ready(w110),
  .picos1_addr(w111),
  .picos1_wdata(w112),
  .picos1_wstrb(w113),
  .picos1_rdata(w114),
  .picos2_valid(w115),
  .picos2_ready(w116),
  .picos2_addr(w117),
  .picos2_wdata(w118),
  .picos2_wstrb(w119),
  .picos2_rdata(w120),
  .picos3_valid(w121),
  .picos3_ready(w122),
  .picos3_addr(w123),
  .picos3_wdata(w124),
  .picos3_wstrb(w125),
  .picos3_rdata(w126),
  .picom_valid(w187),
  .picom_ready(w188),
  .picom_addr(w189),
  .picom_wdata(w190),
  .picom_wstrb(w191),
  .picom_rdata(w192)
 );
 main_code_49 v7c8ceb (
  .in(w3),
  .out(w4)
 );
 PicoMem_SRAM_EG4_4KB u_PicoMem_SRAM_EG4_4KB_51 (
  .resetn(w38),
  .clk(w86),
  .mem_s_valid(w193),
  .mem_s_ready(w194),
  .mem_s_addr(w195),
  .mem_s_wdata(w196),
  .mem_s_wstrb(w197),
  .mem_s_rdata(w198)
 );
 Wishbone_4x7_SEGLED_Controller u_Wishbone_4x7_SEGLED_Controller_52 (
  .segled_bsel(w13),
  .segled_disp(w14),
  .clk(w26),
  .rst(w45),
  .wbs_cyc_i(w151),
  .wbs_stb_i(w152),
  .wbs_we_i(w153),
  .wbs_ack_o(w154),
  .wbs_sel_i(w155),
  .wbs_adr_i(w156),
  .wbs_dat_i(w157),
  .wbs_dat_o(w158)
 );
 Wishbone_RGB_LED_Controller u_Wishbone_RGB_LED_Controller_53 (
  .rgb_led(w12),
  .clk(w25),
  .rst(w44),
  .wbs_cyc_i(w143),
  .wbs_stb_i(w144),
  .wbs_we_i(w145),
  .wbs_ack_o(w146),
  .wbs_sel_i(w147),
  .wbs_adr_i(w148),
  .wbs_dat_i(w149),
  .wbs_dat_o(w150)
 );
 Wishbone_VGA_Controller u_Wishbone_VGA_Controller_54 (
  .clk_p_o(w15),
  .hsync_pad_o(w16),
  .vsync_pad_o(w17),
  .r_pad_o(w18),
  .g_pad_o(w19),
  .b_pad_o(w20),
  .wbm_cti_o(w23),
  .pixel_clk(w24),
  .clk(w27),
  .rst_bus(w46),
  .rst_sys(w47),
  .wbm_cyc_o(w127),
  .wbm_stb_o(w128),
  .wbm_we_o(w129),
  .wbm_ack_i(w130),
  .wbm_sel_o(w131),
  .wbm_adr_o(w132),
  .wbm_dat_o(w133),
  .wbm_dat_i(w134),
  .wbs_cyc_i(w159),
  .wbs_stb_i(w160),
  .wbs_we_i(w161),
  .wbs_ack_o(w162),
  .wbs_sel_i(w163),
  .wbs_adr_i(w164),
  .wbs_dat_i(w165),
  .wbs_dat_o(w166)
 );
 Wishbone_SDRAM_8MB_for_EG4S u_Wishbone_SDRAM_8MB_for_EG4S_55 (
  .wb_cit_i(w21),
  .clk(w31),
  .sdram_clk(w32),
  .rst(w49),
  .wbs_cyc_i(w135),
  .wbs_stb_i(w136),
  .wbs_we_i(w137),
  .wbs_ack_o(w138),
  .wbs_sel_i(w139),
  .wbs_adr_i(w140),
  .wbs_dat_i(w141),
  .wbs_dat_o(w142)
 );
 Wishbone_Arbiter_2_1 u_Wishbone_Arbiter_2_1_56 (
  .wbm0_arb_sel(w22),
  .clk(w28),
  .rst(w48),
  .wbm0_cyc_i(w127),
  .wbm0_stb_i(w128),
  .wbm0_we_i(w129),
  .wbm0_ack_o(w130),
  .wbm0_sel_i(w131),
  .wbm0_adr_i(w132),
  .wbm0_dat_i(w133),
  .wbm0_dat_o(w134),
  .wbs_cyc_o(w135),
  .wbs_stb_o(w136),
  .wbs_we_o(w137),
  .wbs_ack_i(w138),
  .wbs_sel_o(w139),
  .wbs_adr_o(w140),
  .wbs_dat_o(w141),
  .wbs_dat_i(w142),
  .wbm1_cyc_i(w167),
  .wbm1_stb_i(w168),
  .wbm1_we_i(w169),
  .wbm1_ack_o(w170),
  .wbm1_sel_i(w171),
  .wbm1_adr_i(w172),
  .wbm1_dat_i(w173),
  .wbm1_dat_o(w174)
 );
 main_code_57 v186477 (
  .cti_o(w21),
  .arb_sel(w22),
  .cti_i(w23)
 );
 Wishbone_Mux_1_4 #(
  .WBS0_ADDR_MASK(p70),
  .WBS1_ADDR_MASK(p71),
  .WBS0_ADDR_BASE(p72),
  .WBS1_ADDR_BASE(p73),
  .WBS2_ADDR_BASE(p74),
  .WBS2_ADDR_MASK(p75),
  .WBS3_ADDR_BASE(p76),
  .WBS3_ADDR_MASK(p77)
 ) u_Wishbone_Mux_1_4_58 (
  .clk(w29),
  .rst(w43),
  .wbs0_cyc_o(w143),
  .wbs0_stb_o(w144),
  .wbs0_we_o(w145),
  .wbs0_ack_i(w146),
  .wbs0_sel_o(w147),
  .wbs0_adr_o(w148),
  .wbs0_dat_o(w149),
  .wbs0_dat_i(w150),
  .wbs1_cyc_o(w151),
  .wbs1_stb_o(w152),
  .wbs1_we_o(w153),
  .wbs1_ack_i(w154),
  .wbs1_sel_o(w155),
  .wbs1_adr_o(w156),
  .wbs1_dat_o(w157),
  .wbs1_dat_i(w158),
  .wbs2_cyc_o(w159),
  .wbs2_stb_o(w160),
  .wbs2_we_o(w161),
  .wbs2_ack_i(w162),
  .wbs2_sel_o(w163),
  .wbs2_adr_o(w164),
  .wbs2_dat_o(w165),
  .wbs2_dat_i(w166),
  .wbs3_cyc_o(w167),
  .wbs3_stb_o(w168),
  .wbs3_we_o(w169),
  .wbs3_ack_i(w170),
  .wbs3_sel_o(w171),
  .wbs3_adr_o(w172),
  .wbs3_dat_o(w173),
  .wbs3_dat_i(w174),
  .wbm_cyc_i(w207),
  .wbm_stb_i(w208),
  .wbm_we_i(w209),
  .wbm_ack_o(w210),
  .wbm_sel_i(w211),
  .wbm_adr_i(w212),
  .wbm_dat_i(w213),
  .wbm_dat_o(w214)
 );
 PicoMem_Mux_1_4 #(
  .PICOS0_ADDR_MASK(p50),
  .PICOS1_ADDR_MASK(p51),
  .PICOS2_ADDR_MASK(p52),
  .PICOS0_ADDR_BASE(p53),
  .PICOS1_ADDR_BASE(p54),
  .PICOS2_ADDR_BASE(p55),
  .PICOS3_ADDR_BASE(p56),
  .PICOS3_ADDR_MASK(p57)
 ) u_PicoMem_Mux_1_4_59 (
  .picom_valid(w175),
  .picom_ready(w176),
  .picom_addr(w177),
  .picom_wdata(w178),
  .picom_wstrb(w179),
  .picom_rdata(w180),
  .picos0_valid(w181),
  .picos0_ready(w182),
  .picos0_addr(w183),
  .picos0_wdata(w184),
  .picos0_wstrb(w185),
  .picos0_rdata(w186),
  .picos1_valid(w187),
  .picos1_ready(w188),
  .picos1_addr(w189),
  .picos1_wdata(w190),
  .picos1_wstrb(w191),
  .picos1_rdata(w192),
  .picos2_valid(w193),
  .picos2_ready(w194),
  .picos2_addr(w195),
  .picos2_wdata(w196),
  .picos2_wstrb(w197),
  .picos2_rdata(w198),
  .picos3_valid(w215),
  .picos3_ready(w216),
  .picos3_addr(w217),
  .picos3_wdata(w218),
  .picos3_wstrb(w219),
  .picos3_rdata(w220)
 );
 PicoMem_To_Wishbone_Adapter u_PicoMem_To_Wishbone_Adapter_60 (
  .resetn(w39),
  .clk(w87),
  .wbm_cyc_o(w199),
  .wbm_stb_o(w200),
  .wbm_we_o(w201),
  .wbm_ack_i(w202),
  .wbm_sel_o(w203),
  .wbm_adr_o(w204),
  .wbm_dat_o(w205),
  .wbm_dat_i(w206),
  .mem_valid(w215),
  .mem_ready(w216),
  .mem_addr(w217),
  .mem_wdata(w218),
  .mem_wstrb(w219),
  .mem_rdata(w220)
 );
 Wishbone_Async_Reg u_Wishbone_Async_Reg_61 (
  .wbs_clk(w30),
  .wbm_rst(w41),
  .wbs_rst(w42),
  .wbm_clk(w88),
  .wbm_cyc_i(w199),
  .wbm_stb_i(w200),
  .wbm_we_i(w201),
  .wbm_ack_o(w202),
  .wbm_sel_i(w203),
  .wbm_adr_i(w204),
  .wbm_dat_i(w205),
  .wbm_dat_o(w206),
  .wbs_cyc_o(w207),
  .wbs_stb_o(w208),
  .wbs_we_o(w209),
  .wbs_ack_i(w210),
  .wbs_sel_o(w211),
  .wbs_adr_o(w212),
  .wbs_dat_o(w213),
  .wbs_dat_i(w214)
 );
 VGA_640x480_PLL u_VGA_640x480_PLL_62 (
  .clk_25m_out(w24),
  .clk_24m_in(w89)
 );
 Video_System_PLL_For_EG4 u_Video_System_PLL_For_EG4_63 (
  .clk_60m_out(w25),
  .clk_80m_out(w32),
  .clk_24m_in(w90)
 );
 NOT u_NOT_64 (
  .in_0(w40),
  .out_1(w41)
 );
 assign vinit = 1'b0;
endmodule

module main_code_41 (
 output [31:0] irqo
);
 assign irqo = 32'b0;
endmodule

module main_code_49 (
 input [31:0] in,
 output [15:0] out
);
 assign out = in[15:0];
endmodule

module main_code_57 (
 input [2:0] cti_i,
 input arb_sel,
 output [2:0] cti_o
);
 assign cti_o = arb_sel ? cti_i : 3'b0;
endmodule

module PicoRV32_Core #(
 parameter ENABLE_COUNTERS = 1,
 parameter ENABLE_COUNTERS64 = 1,
 parameter ENABLE_REGS_16_31 = 1,
 parameter ENABLE_REGS_DUALPORT = 1,
 parameter LATCHED_MEM_RDATA = 0,
 parameter TWO_STAGE_SHIFT = 1,
 parameter BARREL_SHIFTER = 0,
 parameter TWO_CYCLE_COMPARE = 0,
 parameter TWO_CYCLE_ALU = 0,
 parameter COMPRESSED_ISA = 0,
 parameter CATCH_MISALIGN = 1,
 parameter CATCH_ILLINSN = 1,
 parameter ENABLE_PCPI = 0,
 parameter ENABLE_MUL = 0,
 parameter ENABLE_FAST_MUL = 0,
 parameter ENABLE_DIV = 0,
 parameter ENABLE_IRQ = 0,
 parameter ENABLE_IRQ_QREGS = 1,
 parameter ENABLE_IRQ_TIMER = 1,
 parameter ENABLE_TRACE = 0,
 parameter REGS_INIT_ZERO = 0,
 parameter MASKED_IRQ = 32'h 0000_0000,
 parameter LATCHED_IRQ = 32'h ffff_ffff,
 parameter PROGADDR_RESET = 32'h 0000_0000,
 parameter PROGADDR_IRQ = 32'h 0000_0010,
 parameter STACKADDR = 32'h ffff_ffff
) (
 input clk,
 input resetn,
 input [31:0] irq,
 input mem_ready,
 input [31:0] mem_rdata,
 output trap,
 output [31:0] eoi,
 output mem_valid,
 output [31:0] mem_addr,
 output [31:0] mem_wdata,
 output [3:0] mem_wstrb
);
 localparam p2 = ENABLE_COUNTERS;
 localparam p3 = ENABLE_COUNTERS64;
 localparam p4 = ENABLE_REGS_16_31;
 localparam p5 = ENABLE_REGS_DUALPORT;
 localparam p6 = LATCHED_MEM_RDATA;
 localparam p7 = TWO_STAGE_SHIFT;
 localparam p8 = BARREL_SHIFTER;
 localparam p9 = TWO_CYCLE_COMPARE;
 localparam p10 = TWO_CYCLE_ALU;
 localparam p11 = COMPRESSED_ISA;
 localparam p12 = CATCH_MISALIGN;
 localparam p13 = CATCH_ILLINSN;
 localparam p14 = ENABLE_PCPI;
 localparam p15 = ENABLE_MUL;
 localparam p16 = ENABLE_FAST_MUL;
 localparam p17 = ENABLE_DIV;
 localparam p18 = ENABLE_IRQ;
 localparam p19 = ENABLE_IRQ_QREGS;
 localparam p20 = ENABLE_IRQ_TIMER;
 localparam p21 = ENABLE_TRACE;
 localparam p22 = REGS_INIT_ZERO;
 localparam p23 = MASKED_IRQ;
 localparam p24 = LATCHED_IRQ;
 localparam p25 = PROGADDR_RESET;
 localparam p26 = PROGADDR_IRQ;
 localparam p27 = STACKADDR;
 wire w0;
 wire [31:0] w1;
 wire w28;
 wire w29;
 wire [31:0] w30;
 wire [31:0] w31;
 wire w32;
 wire w33;
 wire [31:0] w34;
 wire [31:0] w35;
 wire [3:0] w36;
 assign trap = w0;
 assign eoi = w1;
 assign w28 = clk;
 assign w29 = resetn;
 assign w30 = irq;
 assign w31 = mem_rdata;
 assign w32 = mem_ready;
 assign mem_valid = w33;
 assign mem_addr = w34;
 assign mem_wdata = w35;
 assign mem_wstrb = w36;
 PicoRV32_Core_code_31 #(
  .ENABLE_COUNTERS(p2),
  .ENABLE_COUNTERS64(p3),
  .ENABLE_REGS_16_31(p4),
  .ENABLE_REGS_DUALPORT(p5),
  .LATCHED_MEM_RDATA(p6),
  .TWO_STAGE_SHIFT(p7),
  .BARREL_SHIFTER(p8),
  .TWO_CYCLE_COMPARE(p9),
  .TWO_CYCLE_ALU(p10),
  .COMPRESSED_ISA(p11),
  .CATCH_MISALIGN(p12),
  .CATCH_ILLINSN(p13),
  .ENABLE_PCPI(p14),
  .ENABLE_MUL(p15),
  .ENABLE_FAST_MUL(p16),
  .ENABLE_DIV(p17),
  .ENABLE_IRQ(p18),
  .ENABLE_IRQ_QREGS(p19),
  .ENABLE_IRQ_TIMER(p20),
  .ENABLE_TRACE(p21),
  .REGS_INIT_ZERO(p22),
  .MASKED_IRQ(p23),
  .LATCHED_IRQ(p24),
  .PROGADDR_RESET(p25),
  .PROGADDR_IRQ(p26),
  .STACKADDR(p27)
 ) v6eb881 (
  .trap(w0),
  .eoi(w1),
  .clk(w28),
  .resetn(w29),
  .irq(w30),
  .mem_rdata(w31),
  .mem_ready(w32),
  .mem_valid(w33),
  .mem_addr(w34),
  .mem_wdata(w35),
  .mem_wstrb(w36)
 );
endmodule

module PicoRV32_Core_code_31 #(
 parameter ENABLE_COUNTERS = 0,
 parameter ENABLE_COUNTERS64 = 0,
 parameter ENABLE_REGS_16_31 = 0,
 parameter ENABLE_REGS_DUALPORT = 0,
 parameter LATCHED_MEM_RDATA = 0,
 parameter TWO_STAGE_SHIFT = 0,
 parameter BARREL_SHIFTER = 0,
 parameter TWO_CYCLE_COMPARE = 0,
 parameter TWO_CYCLE_ALU = 0,
 parameter COMPRESSED_ISA = 0,
 parameter CATCH_MISALIGN = 0,
 parameter CATCH_ILLINSN = 0,
 parameter ENABLE_PCPI = 0,
 parameter ENABLE_MUL = 0,
 parameter ENABLE_FAST_MUL = 0,
 parameter ENABLE_DIV = 0,
 parameter ENABLE_IRQ = 0,
 parameter ENABLE_IRQ_QREGS = 0,
 parameter ENABLE_IRQ_TIMER = 0,
 parameter ENABLE_TRACE = 0,
 parameter REGS_INIT_ZERO = 0,
 parameter MASKED_IRQ = 0,
 parameter LATCHED_IRQ = 0,
 parameter PROGADDR_RESET = 0,
 parameter PROGADDR_IRQ = 0,
 parameter STACKADDR = 0
) (
 input clk,
 input resetn,
 input mem_ready,
 input [31:0] mem_rdata,
 input [31:0] irq,
 output trap,
 output mem_valid,
 output mem_instr,
 output [31:0] mem_addr,
 output [31:0] mem_wdata,
 output [3:0] mem_wstrb,
 output [31:0] eoi
);
 //@include picorv32.v
 
 picorv32 #(
   .ENABLE_COUNTERS(ENABLE_COUNTERS),
   .ENABLE_COUNTERS64(ENABLE_COUNTERS64),
   .ENABLE_REGS_16_31(ENABLE_REGS_16_31),
   .ENABLE_REGS_DUALPORT(ENABLE_REGS_DUALPORT),
   .LATCHED_MEM_RDATA(LATCHED_MEM_RDATA),
   .TWO_STAGE_SHIFT(TWO_STAGE_SHIFT),
   .BARREL_SHIFTER(BARREL_SHIFTER),
   .TWO_CYCLE_COMPARE(TWO_CYCLE_COMPARE),
   .TWO_CYCLE_ALU(TWO_CYCLE_ALU),
   .COMPRESSED_ISA(COMPRESSED_ISA),
   .CATCH_MISALIGN(CATCH_MISALIGN),
   .CATCH_ILLINSN(CATCH_ILLINSN),
   .ENABLE_PCPI(ENABLE_PCPI),
   .ENABLE_MUL(ENABLE_MUL),
   .ENABLE_FAST_MUL(ENABLE_FAST_MUL),
   .ENABLE_DIV(ENABLE_DIV),
   .ENABLE_IRQ(ENABLE_IRQ),
   .ENABLE_IRQ_QREGS(ENABLE_IRQ_QREGS),
   .ENABLE_IRQ_TIMER(ENABLE_IRQ_TIMER),
   .ENABLE_TRACE(ENABLE_TRACE),
   .REGS_INIT_ZERO(REGS_INIT_ZERO),
   .MASKED_IRQ(MASKED_IRQ),
   .LATCHED_IRQ(LATCHED_IRQ),
   .PROGADDR_RESET(PROGADDR_RESET),
   .PROGADDR_IRQ(PROGADDR_IRQ),
   .STACKADDR(STACKADDR)
 ) u_picorv32 (
   .clk(clk),
   .resetn(resetn),
   .trap(trap),
   .mem_valid(mem_valid),
   .mem_instr(mem_instr),
   .mem_ready(mem_ready),
   .mem_addr(mem_addr),
   .mem_wdata(mem_wdata),
   .mem_wstrb(mem_wstrb),
   .mem_rdata(mem_rdata),
   .irq(irq),
   .eoi(eoi)
 );
 
endmodule

module Reset_Sync (
 input clk,
 input ext_reset,
 output resetn
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = ext_reset;
 assign w1 = clk;
 assign resetn = w2;
 Reset_Sync_code_3 v59e23f (
  .ext_reset(w0),
  .clk(w1),
  .resetn(w2)
 );
endmodule

module Reset_Sync_code_3 (
 input clk,
 input ext_reset,
 output resetn
);
 reg [7:0] reset_cnt = 0;
 
 always @(posedge clk) begin
     if (~ext_reset)
         reset_cnt <= 8'b0;
     else
         reset_cnt <= reset_cnt + !resetn;
 end
 
 assign resetn = &reset_cnt;
endmodule

module PicoMem_SRAM_EG4_4KB #(
 parameter INIT_FILE = "NONE"
) (
 input clk,
 input resetn,
 input mem_s_valid,
 input [31:0] mem_s_addr,
 input [31:0] mem_s_wdata,
 input [3:0] mem_s_wstrb,
 output mem_s_ready,
 output [31:0] mem_s_rdata
);
 localparam p2 = INIT_FILE;
 wire w0;
 wire w1;
 wire w3;
 wire w4;
 wire [31:0] w5;
 wire [31:0] w6;
 wire [3:0] w7;
 wire [31:0] w8;
 assign w0 = clk;
 assign w1 = resetn;
 assign w3 = mem_s_valid;
 assign mem_s_ready = w4;
 assign w5 = mem_s_addr;
 assign w6 = mem_s_wdata;
 assign w7 = mem_s_wstrb;
 assign mem_s_rdata = w8;
 PicoMem_SRAM_EG4_4KB_code_5 #(
  .INIT_FILE(p2)
 ) vcb39f0 (
  .clk(w0),
  .resetn(w1),
  .pico_valid(w3),
  .pico_ready(w4),
  .pico_addr(w5),
  .pico_wdata(w6),
  .pico_wstrb(w7),
  .pico_rdata(w8)
 );
endmodule

module PicoMem_SRAM_EG4_4KB_code_5 #(
 parameter INIT_FILE = 0
) (
 input clk,
 input resetn,
 input pico_valid,
 input [31:0] pico_addr,
 input [31:0] pico_wdata,
 input [3:0] pico_wstrb,
 output pico_ready,
 output [31:0] pico_rdata
);
 reg pico_ready_r;
 
 wire [9:0] eaddr = pico_addr[11:2];
 
 always @(posedge clk) begin
     if(!resetn) begin
         pico_ready_r <= 1'b0;
     end else begin
         if (pico_ready_r) pico_ready_r <= 1'b0;
         else pico_ready_r <= pico_valid;
     end
 end
 
 wire [3:0] pico_wen = pico_wstrb & {4{pico_valid & pico_ready}};
 
 EG_LOGIC_BRAM #( .DATA_WIDTH_A(32),
 	.ADDR_WIDTH_A(10),
 	.DATA_DEPTH_A(1024),
 	.DATA_WIDTH_B(32),
 	.ADDR_WIDTH_B(10),
 	.DATA_DEPTH_B(1024),
 	.BYTE_ENABLE(8),
 	.BYTE_A(4),
 	.BYTE_B(4),
 	.MODE("SP"),
 	.IMPLEMENT("9K"),
 	.INIT_FILE(INIT_FILE)
 ) inst (
 	.dia(pico_wdata),
 	.addra(eaddr),
 	.cea(pico_valid),
 	.ocea(1'b0),
 	.clka(clk),
 	.bea(pico_wen),
 	.rsta(~resetn),
 	.doa(pico_rdata),
 	.wea(1'b0),
 	.dib({32{1'b0}}),
 	.addrb({10{1'b0}}),
 	.ceb(1'b0),
 	.oceb(1'b0),
 	.clkb(1'b0),
 	.beb(4'b0),
 	.web(1'b0),
 	.rstb(1'b0),
 	.dob()
 );
 
 assign pico_ready = pico_ready_r;
 
endmodule

module PicoMem_SPI_Flash (
 input clk,
 input resetn,
 input flash_mem_valid,
 input [31:0] flash_mem_addr,
 input [31:0] flash_mem_wdata,
 input [3:0] flash_mem_wstrb,
 input flash_cfg_valid,
 input [31:0] flash_cfg_addr,
 input [31:0] flash_cfg_wdata,
 input [3:0] flash_cfg_wstrb,
 output flash_csb,
 output flash_clk,
 output flash_mem_ready,
 output [31:0] flash_mem_rdata,
 output flash_cfg_ready,
 output [31:0] flash_cfg_rdata,
 inout [3:0] flash_dio
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire [3:0] w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 wire w16;
 wire w18;
 wire w19;
 wire [31:0] w20;
 wire [31:0] w21;
 wire [3:0] w22;
 wire [31:0] w23;
 wire w24;
 wire w25;
 wire [31:0] w26;
 wire [31:0] w27;
 assign flash_csb = w0;
 assign flash_clk = w1;
 assign w2 = clk;
 assign w3 = resetn;
 assign w18 = flash_cfg_valid;
 assign flash_cfg_ready = w19;
 assign w20 = flash_cfg_addr;
 assign w21 = flash_cfg_wdata;
 assign w22 = flash_cfg_wstrb;
 assign flash_cfg_rdata = w23;
 assign w24 = flash_mem_valid;
 assign flash_mem_ready = w25;
 assign w26 = flash_mem_addr;
 assign flash_mem_rdata = w27;
 PicoMem_SPI_Flash_code_8 v30fdb5 (
  .flash_csb(w0),
  .flash_clk(w1),
  .clk(w2),
  .resetn(w3),
  .cfgreg_we(w4),
  .flash_io0_oe(w5),
  .flash_io1_oe(w6),
  .flash_io2_oe(w7),
  .flash_io3_oe(w8),
  .flash_io0_do(w9),
  .flash_io1_do(w10),
  .flash_io2_do(w11),
  .flash_io3_do(w12),
  .flash_io0_di(w13),
  .flash_io1_di(w14),
  .flash_io2_di(w15),
  .flash_io3_di(w16),
  .cfgreg_di(w21),
  .cfgreg_do(w23),
  .valid(w24),
  .ready(w25),
  .addr(w26),
  .rdata(w27)
 );
 PicoMem_SPI_Flash_code_9 v4bb203 (
  .cfg_we(w4),
  .pico_valid(w18),
  .pico_ready(w19),
  .pico_addr(w20),
  .pico_wstrb(w22)
 );
 PicoMem_SPI_Flash_code_10 vd40db9 (
  .flash_io0_oe(w5),
  .flash_io1_oe(w6),
  .flash_io2_oe(w7),
  .flash_io3_oe(w8),
  .flash_io0_do(w9),
  .flash_io1_do(w10),
  .flash_io2_do(w11),
  .flash_io3_do(w12),
  .flash_io0_di(w13),
  .flash_io1_di(w14),
  .flash_io2_di(w15),
  .flash_io3_di(w16),
  .flash_dio(flash_dio)
 );
endmodule

module PicoMem_SPI_Flash_code_8 (
 input clk,
 input resetn,
 input valid,
 input [31:0] addr,
 input flash_io0_di,
 input flash_io1_di,
 input flash_io2_di,
 input flash_io3_di,
 input [3:0] cfgreg_we,
 input [31:0] cfgreg_di,
 output ready,
 output [31:0] rdata,
 output flash_csb,
 output flash_clk,
 output flash_io0_oe,
 output flash_io1_oe,
 output flash_io2_oe,
 output flash_io3_oe,
 output flash_io0_do,
 output flash_io1_do,
 output flash_io2_do,
 output flash_io3_do,
 output [31:0] cfgreg_do
);
 //@include spimemio_winbond.v
 
 wire [23:0] flash_addr = addr[23:0];
 
 spimemio u_spimemio (
   .clk(clk),
   .resetn(resetn),
   .valid(valid),
   .ready(ready),
   .addr(flash_addr),
   .rdata(rdata),
   .flash_csb(flash_csb),
   .flash_clk(flash_clk),
   .flash_io0_oe(flash_io0_oe),
   .flash_io1_oe(flash_io1_oe),
   .flash_io2_oe(flash_io2_oe),
   .flash_io3_oe(flash_io3_oe),
   .flash_io0_do(flash_io0_do),
   .flash_io1_do(flash_io1_do),
   .flash_io2_do(flash_io2_do),
   .flash_io3_do(flash_io3_do),
   .flash_io0_di(flash_io0_di),
   .flash_io1_di(flash_io1_di),
   .flash_io2_di(flash_io2_di),
   .flash_io3_di(flash_io3_di),
   .cfgreg_we(cfgreg_we),
   .cfgreg_di(cfgreg_di),
   .cfgreg_do(cfgreg_do)
 );
 
endmodule

module PicoMem_SPI_Flash_code_9 (
 input pico_valid,
 input [31:0] pico_addr,
 input [3:0] pico_wstrb,
 output pico_ready,
 output [3:0] cfg_we
);
 assign cfg_we = pico_valid ? pico_wstrb : 4'h0;
 assign pico_ready = pico_valid;
 
endmodule

module PicoMem_SPI_Flash_code_10 (
 input flash_io0_oe,
 input flash_io1_oe,
 input flash_io2_oe,
 input flash_io3_oe,
 input flash_io0_do,
 input flash_io1_do,
 input flash_io2_do,
 input flash_io3_do,
 output flash_io0_di,
 output flash_io1_di,
 output flash_io2_di,
 output flash_io3_di,
 inout [3:0] flash_dio
);
 assign flash_dio[0] = flash_io0_oe ? flash_io0_do : 1'bz;
 assign flash_io0_di = flash_dio[0];
 
 assign flash_dio[1] = flash_io1_oe ? flash_io1_do : 1'bz;
 assign flash_io1_di = flash_dio[1];
 
 assign flash_dio[2] = flash_io2_oe ? flash_io2_do : 1'bz;
 assign flash_io2_di = flash_dio[2];
 
 assign flash_dio[3] = flash_io3_oe ? flash_io3_do : 1'bz;
 assign flash_io3_di = flash_dio[3];
 
endmodule

module PicoMem_Mux_1_2 #(
 parameter PICOS0_ADDR_BASE = 32'h0000_0000,
 parameter PICOS0_ADDR_MASK = 32'h8000_0000,
 parameter PICOS1_ADDR_BASE = 32'h8000_0000,
 parameter PICOS1_ADDR_MASK = 32'h8000_0000
) (
 input picos0_ready,
 input [31:0] picos0_rdata,
 input picos1_ready,
 input [31:0] picos1_rdata,
 input picom_valid,
 input [31:0] picom_addr,
 input [31:0] picom_wdata,
 input [3:0] picom_wstrb,
 output picos0_valid,
 output [31:0] picos0_addr,
 output [31:0] picos0_wdata,
 output [3:0] picos0_wstrb,
 output picos1_valid,
 output [31:0] picos1_addr,
 output [31:0] picos1_wdata,
 output [3:0] picos1_wstrb,
 output picom_ready,
 output [31:0] picom_rdata
);
 localparam p0 = PICOS0_ADDR_BASE;
 localparam p1 = PICOS0_ADDR_MASK;
 localparam p2 = PICOS1_ADDR_BASE;
 localparam p3 = PICOS1_ADDR_MASK;
 wire w4;
 wire [31:0] w5;
 wire [3:0] w6;
 wire [31:0] w7;
 wire w8;
 wire [31:0] w9;
 wire w10;
 wire [31:0] w11;
 wire [31:0] w12;
 wire [3:0] w13;
 wire w14;
 wire [31:0] w15;
 wire w16;
 wire w17;
 wire [31:0] w18;
 wire [31:0] w19;
 wire [3:0] w20;
 wire [31:0] w21;
 assign picos0_valid = w4;
 assign picos0_addr = w5;
 assign picos0_wstrb = w6;
 assign picos0_wdata = w7;
 assign w8 = picos0_ready;
 assign w9 = picos0_rdata;
 assign picos1_valid = w10;
 assign picos1_addr = w11;
 assign picos1_wdata = w12;
 assign picos1_wstrb = w13;
 assign w14 = picos1_ready;
 assign w15 = picos1_rdata;
 assign w16 = picom_valid;
 assign picom_ready = w17;
 assign w18 = picom_addr;
 assign w19 = picom_wdata;
 assign w20 = picom_wstrb;
 assign picom_rdata = w21;
 PicoMem_Mux_1_2_code_10 #(
  .picos0_addr_base(p0),
  .picos0_addr_mask(p1),
  .picos1_addr_base(p2),
  .picos1_addr_mask(p3)
 ) vb80270 (
  .picos0_valid(w4),
  .picos0_addr(w5),
  .picos0_wstrb(w6),
  .picos0_wdata(w7),
  .picos0_ready(w8),
  .picos0_rdata(w9),
  .picos1_valid(w10),
  .picos1_addr(w11),
  .picos1_wdata(w12),
  .picos1_wstrb(w13),
  .picos1_ready(w14),
  .picos1_rdata(w15),
  .picom_valid(w16),
  .picom_ready(w17),
  .picom_addr(w18),
  .picom_wdata(w19),
  .picom_wstrb(w20),
  .picom_rdata(w21)
 );
endmodule

module PicoMem_Mux_1_2_code_10 #(
 parameter picos0_addr_base = 0,
 parameter picos0_addr_mask = 0,
 parameter picos1_addr_base = 0,
 parameter picos1_addr_mask = 0
) (
 input picom_valid,
 input [31:0] picom_addr,
 input [31:0] picom_wdata,
 input [3:0] picom_wstrb,
 input picos0_ready,
 input [31:0] picos0_rdata,
 input picos1_ready,
 input [31:0] picos1_rdata,
 output picom_ready,
 output [31:0] picom_rdata,
 output picos0_valid,
 output [31:0] picos0_addr,
 output [31:0] picos0_wdata,
 output [3:0] picos0_wstrb,
 output picos1_valid,
 output [31:0] picos1_addr,
 output [31:0] picos1_wdata,
 output [3:0] picos1_wstrb
);
 wire picos0_match = ~|((picom_addr ^ picos0_addr_base) & picos0_addr_mask);
 wire picos1_match = ~|((picom_addr ^ picos1_addr_base) & picos1_addr_mask);
 
 wire picos0_sel = picos0_match;
 wire picos1_sel = picos1_match & (~picos0_match);
 
 // master
 assign picom_rdata = picos0_sel ? picos0_rdata :
                      picos1_sel ? picos1_rdata :
                      32'b0;
 
 assign picom_ready = picos0_sel ? picos0_ready :
                      picos1_sel ? picos1_ready :
                      1'b0;
 
 // slave 0
 assign picos0_valid = picom_valid & picos0_sel;
 assign picos0_addr = picom_addr;
 assign picos0_wdata = picom_wdata;
 assign picos0_wstrb = picom_wstrb;
 
 // slave 1
 assign picos1_valid = picom_valid & picos1_sel;
 assign picos1_addr = picom_addr;
 assign picos1_wdata = picom_wdata;
 assign picos1_wstrb = picom_wstrb;
 
endmodule

module PicoMem_GPO #(
 parameter INIT_VAL = 32'hFFFF_FFFF
) (
 input clk,
 input resetn,
 input busin_valid,
 input [31:0] busin_addr,
 input [31:0] busin_wdata,
 input [3:0] busin_wstrb,
 output [31:0] out,
 output busin_ready,
 output [31:0] busin_rdata
);
 localparam p3 = INIT_VAL;
 wire [31:0] w0;
 wire w1;
 wire w2;
 wire w4;
 wire w5;
 wire [31:0] w6;
 wire [31:0] w7;
 wire [3:0] w8;
 wire [31:0] w9;
 assign out = w0;
 assign w1 = clk;
 assign w2 = resetn;
 assign w4 = busin_valid;
 assign busin_ready = w5;
 assign w6 = busin_addr;
 assign w7 = busin_wdata;
 assign w8 = busin_wstrb;
 assign busin_rdata = w9;
 PicoMem_GPO_code_6 #(
  .INIT_VAL(p3)
 ) vec1e5e (
  .out(w0),
  .clk(w1),
  .resetn(w2),
  .pico_valid(w4),
  .pico_ready(w5),
  .pico_addr(w6),
  .pico_wdata(w7),
  .pico_wstrb(w8),
  .pico_rdata(w9)
 );
endmodule

module PicoMem_GPO_code_6 #(
 parameter INIT_VAL = 0
) (
 input clk,
 input resetn,
 input pico_valid,
 input [31:0] pico_addr,
 input [31:0] pico_wdata,
 input [3:0] pico_wstrb,
 output pico_ready,
 output [31:0] pico_rdata,
 output [31:0] out
);
 reg [31:0] out_r;
 reg ready_r;
 
 always @(posedge clk) begin
     if (!resetn) begin
         ready_r <= 1'b0;
         out_r <= INIT_VAL;
     end else begin
         ready_r <= 1'b0;
 		if (pico_valid && !ready_r) begin
 			ready_r <= 1'b1;
 			if (pico_wstrb[3]) out_r[31:24] <= pico_wdata[31:24];
 			if (pico_wstrb[2]) out_r[24:16] <= pico_wdata[24:16];
 			if (pico_wstrb[1]) out_r[15: 8] <= pico_wdata[15: 8];
 			if (pico_wstrb[0]) out_r[ 7: 0] <= pico_wdata[ 7: 0];
 		end
     end
 end
 
 assign pico_ready = ready_r;
 assign pico_rdata = out_r;
 
 assign out = out_r;
 
endmodule

module PicoMem_UART (
 input clk,
 input resetn,
 input ser_rx,
 input mem_s_valid,
 input [31:0] mem_s_addr,
 input [31:0] mem_s_wdata,
 input [3:0] mem_s_wstrb,
 output ser_tx,
 output mem_s_ready,
 output [31:0] mem_s_rdata
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire [31:0] w6;
 wire [31:0] w7;
 wire [3:0] w8;
 wire [31:0] w9;
 assign ser_tx = w0;
 assign w1 = clk;
 assign w2 = resetn;
 assign w3 = ser_rx;
 assign w4 = mem_s_valid;
 assign mem_s_ready = w5;
 assign w6 = mem_s_addr;
 assign w7 = mem_s_wdata;
 assign w8 = mem_s_wstrb;
 assign mem_s_rdata = w9;
 PicoMem_UART_code_6 vfb912d (
  .ser_tx(w0),
  .clk(w1),
  .resetn(w2),
  .ser_rx(w3),
  .pico_valid(w4),
  .pico_ready(w5),
  .pico_addr(w6),
  .pico_wdata(w7),
  .pico_wstrb(w8),
  .pico_rdata(w9)
 );
endmodule

module PicoMem_UART_code_6 (
 input clk,
 input resetn,
 input ser_rx,
 input pico_valid,
 input [31:0] pico_addr,
 input [31:0] pico_wdata,
 input [3:0] pico_wstrb,
 output ser_tx,
 output pico_ready,
 output [31:0] pico_rdata
);
 //@include simpleuart.v
 
 wire [31:0] reg_dat_do;
 wire [31:0] reg_div_do;
 
 assign pico_rdata = pico_addr[2] ?
                     reg_div_do :
                     reg_dat_do;
 
 wire reg_dat_sel = pico_valid && ~pico_addr[2];
 wire reg_div_sel = pico_valid && pico_addr[2];
 
 wire reg_dat_wait;
 
 assign pico_ready = reg_div_sel || (reg_dat_sel && ~reg_dat_wait);
 
 simpleuart u_simpleuart (
   .clk(clk),
   .resetn(resetn),
   .ser_tx(ser_tx),
   .ser_rx(ser_rx),
   .reg_div_we({4{reg_div_sel}} & pico_wstrb),
   .reg_div_di(pico_wdata),
   .reg_div_do(reg_div_do),
   .reg_dat_we(reg_dat_sel & pico_wstrb[0]),
   .reg_dat_re(reg_dat_sel & ~(|pico_wstrb)),
   .reg_dat_di(pico_wdata),
   .reg_dat_do(reg_dat_do),
   .reg_dat_wait(reg_dat_wait)
 );
 
endmodule

module PicoMem_Mux_1_4 #(
 parameter PICOS0_ADDR_BASE = 32'h0000_0000,
 parameter PICOS0_ADDR_MASK = 32'hC000_0000,
 parameter PICOS1_ADDR_BASE = 32'h4000_0000,
 parameter PICOS1_ADDR_MASK = 32'hC000_0000,
 parameter PICOS2_ADDR_BASE = 32'h8000_0000,
 parameter PICOS2_ADDR_MASK = 32'hC000_0000,
 parameter PICOS3_ADDR_BASE = 32'hC000_0000,
 parameter PICOS3_ADDR_MASK = 32'hC000_0000
) (
 input picos0_ready,
 input [31:0] picos0_rdata,
 input picos1_ready,
 input [31:0] picos1_rdata,
 input picom_valid,
 input [31:0] picom_addr,
 input [31:0] picom_wdata,
 input [3:0] picom_wstrb,
 input picos2_ready,
 input [31:0] picos2_rdata,
 input picos3_ready,
 input [31:0] picos3_rdata,
 output picos0_valid,
 output [31:0] picos0_addr,
 output [31:0] picos0_wdata,
 output [3:0] picos0_wstrb,
 output picos1_valid,
 output [31:0] picos1_addr,
 output [31:0] picos1_wdata,
 output [3:0] picos1_wstrb,
 output picom_ready,
 output [31:0] picom_rdata,
 output picos2_valid,
 output [31:0] picos2_addr,
 output [31:0] picos2_wdata,
 output [3:0] picos2_wstrb,
 output picos3_valid,
 output [31:0] picos3_addr,
 output [31:0] picos3_wdata,
 output [3:0] picos3_wstrb
);
 localparam p0 = PICOS0_ADDR_BASE;
 localparam p1 = PICOS0_ADDR_MASK;
 localparam p2 = PICOS1_ADDR_BASE;
 localparam p3 = PICOS1_ADDR_MASK;
 localparam p4 = PICOS2_ADDR_BASE;
 localparam p5 = PICOS2_ADDR_MASK;
 localparam p6 = PICOS3_ADDR_BASE;
 localparam p7 = PICOS3_ADDR_MASK;
 wire w8;
 wire [31:0] w9;
 wire [3:0] w10;
 wire [31:0] w11;
 wire w12;
 wire [31:0] w13;
 wire w14;
 wire [31:0] w15;
 wire [31:0] w16;
 wire [3:0] w17;
 wire w18;
 wire [31:0] w19;
 wire w20;
 wire w21;
 wire [31:0] w22;
 wire [31:0] w23;
 wire [3:0] w24;
 wire [31:0] w25;
 wire w26;
 wire [31:0] w27;
 wire [31:0] w28;
 wire [3:0] w29;
 wire [31:0] w30;
 wire w31;
 wire w32;
 wire [31:0] w33;
 wire [31:0] w34;
 wire [3:0] w35;
 wire w36;
 wire [31:0] w37;
 assign picos0_valid = w8;
 assign picos0_addr = w9;
 assign picos0_wstrb = w10;
 assign picos0_wdata = w11;
 assign w12 = picos0_ready;
 assign w13 = picos0_rdata;
 assign picos1_valid = w14;
 assign picos1_addr = w15;
 assign picos1_wdata = w16;
 assign picos1_wstrb = w17;
 assign w18 = picos1_ready;
 assign w19 = picos1_rdata;
 assign w20 = picom_valid;
 assign picom_ready = w21;
 assign w22 = picom_addr;
 assign w23 = picom_wdata;
 assign w24 = picom_wstrb;
 assign picom_rdata = w25;
 assign picos2_valid = w26;
 assign picos2_addr = w27;
 assign picos2_wdata = w28;
 assign picos2_wstrb = w29;
 assign w30 = picos2_rdata;
 assign w31 = picos2_ready;
 assign picos3_valid = w32;
 assign picos3_addr = w33;
 assign picos3_wdata = w34;
 assign picos3_wstrb = w35;
 assign w36 = picos3_ready;
 assign w37 = picos3_rdata;
 PicoMem_Mux_1_4_code_14 #(
  .picos0_addr_base(p0),
  .picos0_addr_mask(p1),
  .picos1_addr_base(p2),
  .picos1_addr_mask(p3),
  .picos2_addr_base(p4),
  .picos2_addr_mask(p5),
  .picos3_addr_base(p6),
  .picos3_addr_mask(p7)
 ) vb80270 (
  .picos0_valid(w8),
  .picos0_addr(w9),
  .picos0_wstrb(w10),
  .picos0_wdata(w11),
  .picos0_ready(w12),
  .picos0_rdata(w13),
  .picos1_valid(w14),
  .picos1_addr(w15),
  .picos1_wdata(w16),
  .picos1_wstrb(w17),
  .picos1_ready(w18),
  .picos1_rdata(w19),
  .picom_valid(w20),
  .picom_ready(w21),
  .picom_addr(w22),
  .picom_wdata(w23),
  .picom_wstrb(w24),
  .picom_rdata(w25),
  .picos2_valid(w26),
  .picos2_addr(w27),
  .picos2_wdata(w28),
  .picos2_wstrb(w29),
  .picos2_rdata(w30),
  .picos2_ready(w31),
  .picos3_valid(w32),
  .picos3_addr(w33),
  .picos3_wdata(w34),
  .picos3_wstrb(w35),
  .picos3_ready(w36),
  .picos3_rdata(w37)
 );
endmodule

module PicoMem_Mux_1_4_code_14 #(
 parameter picos0_addr_base = 0,
 parameter picos0_addr_mask = 0,
 parameter picos1_addr_base = 0,
 parameter picos1_addr_mask = 0,
 parameter picos2_addr_base = 0,
 parameter picos2_addr_mask = 0,
 parameter picos3_addr_base = 0,
 parameter picos3_addr_mask = 0
) (
 input picom_valid,
 input [31:0] picom_addr,
 input [31:0] picom_wdata,
 input [3:0] picom_wstrb,
 input picos0_ready,
 input [31:0] picos0_rdata,
 input picos1_ready,
 input [31:0] picos1_rdata,
 input picos2_ready,
 input [31:0] picos2_rdata,
 input picos3_ready,
 input [31:0] picos3_rdata,
 output picom_ready,
 output [31:0] picom_rdata,
 output picos0_valid,
 output [31:0] picos0_addr,
 output [31:0] picos0_wdata,
 output [3:0] picos0_wstrb,
 output picos1_valid,
 output [31:0] picos1_addr,
 output [31:0] picos1_wdata,
 output [3:0] picos1_wstrb,
 output picos2_valid,
 output [31:0] picos2_addr,
 output [31:0] picos2_wdata,
 output [3:0] picos2_wstrb,
 output picos3_valid,
 output [31:0] picos3_addr,
 output [31:0] picos3_wdata,
 output [3:0] picos3_wstrb
);
 wire picos0_match = ~|((picom_addr ^ picos0_addr_base) & picos0_addr_mask);
 wire picos1_match = ~|((picom_addr ^ picos1_addr_base) & picos1_addr_mask);
 wire picos2_match = ~|((picom_addr ^ picos2_addr_base) & picos2_addr_mask);
 wire picos3_match = ~|((picom_addr ^ picos3_addr_base) & picos3_addr_mask);
 
 wire picos0_sel = picos0_match;
 wire picos1_sel = picos1_match & (~picos0_match);
 wire picos2_sel = picos2_match & (~picos0_match) & (~picos1_match);
 wire picos3_sel = picos3_match & (~picos0_match) & (~picos1_match) & (~picos2_match);
 
 // master
 assign picom_rdata = picos0_sel ? picos0_rdata :
                      picos1_sel ? picos1_rdata :
                      picos2_sel ? picos2_rdata :
                      picos3_sel ? picos3_rdata :
                      32'b0;
 
 assign picom_ready = picos0_sel ? picos0_ready :
                      picos1_sel ? picos1_ready :
                      picos2_sel ? picos2_ready :
                      picos3_sel ? picos3_ready :
                      1'b0;
 
 // slave 0
 assign picos0_valid = picom_valid & picos0_sel;
 assign picos0_addr = picom_addr;
 assign picos0_wdata = picom_wdata;
 assign picos0_wstrb = picom_wstrb;
 
 // slave 1
 assign picos1_valid = picom_valid & picos1_sel;
 assign picos1_addr = picom_addr;
 assign picos1_wdata = picom_wdata;
 assign picos1_wstrb = picom_wstrb;
 
 // slave 2
 assign picos2_valid = picom_valid & picos2_sel;
 assign picos2_addr = picom_addr;
 assign picos2_wdata = picom_wdata;
 assign picos2_wstrb = picom_wstrb;
 
 // slave 3
 assign picos3_valid = picom_valid & picos3_sel;
 assign picos3_addr = picom_addr;
 assign picos3_wdata = picom_wdata;
 assign picos3_wstrb = picom_wstrb;
 
endmodule

module Wishbone_4x7_SEGLED_Controller (
 input clk,
 input rst,
 input wbs_cyc_i,
 input wbs_stb_i,
 input wbs_we_i,
 input [3:0] wbs_sel_i,
 input [31:0] wbs_adr_i,
 input [31:0] wbs_dat_i,
 output [3:0] segled_bsel,
 output [7:0] segled_disp,
 output wbs_ack_o,
 output [31:0] wbs_dat_o
);
 wire w0;
 wire w1;
 wire [3:0] w2;
 wire [7:0] w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire [3:0] w8;
 wire [31:0] w9;
 wire [31:0] w10;
 wire [31:0] w11;
 assign w0 = clk;
 assign w1 = rst;
 assign segled_bsel = w2;
 assign segled_disp = w3;
 assign w4 = wbs_cyc_i;
 assign w5 = wbs_stb_i;
 assign w6 = wbs_we_i;
 assign wbs_ack_o = w7;
 assign w8 = wbs_sel_i;
 assign w9 = wbs_adr_i;
 assign w10 = wbs_dat_i;
 assign wbs_dat_o = w11;
 Wishbone_4x7_SEGLED_Controller_code_6 v66f4a3 (
  .clk(w0),
  .rst(w1),
  .segled_bsel(w2),
  .segled_disp(w3),
  .wb_cyc_i(w4),
  .wb_stb_i(w5),
  .wb_we_i(w6),
  .wb_ack_o(w7),
  .wb_sel_i(w8),
  .wb_adr_i(w9),
  .wb_dat_i(w10),
  .wb_dat_o(w11)
 );
endmodule

module Wishbone_4x7_SEGLED_Controller_code_6 (
 input clk,
 input rst,
 input wb_cyc_i,
 input wb_stb_i,
 input wb_we_i,
 input [3:0] wb_sel_i,
 input [31:0] wb_adr_i,
 input [31:0] wb_dat_i,
 output wb_ack_o,
 output [31:0] wb_dat_o,
 output [3:0] segled_bsel,
 output [7:0] segled_disp
);
 //@include segled_wb32.v
 
 segled_wb32 u_segled_wb32 (
   .clk(clk),
   .rst(rst),
   .wb_cyc_i(wb_cyc_i),
   .wb_stb_i(wb_stb_i),
   .wb_we_i(wb_we_i),
   .wb_sel_i(wb_sel_i),
   .wb_adr_i(wb_adr_i),
   .wb_dat_i(wb_dat_i),
   .wb_ack_o(wb_ack_o),
   .wb_dat_o(wb_dat_o),
   .segled_bsel(segled_bsel),
   .segled_disp(segled_disp)
 );
 
endmodule

module Wishbone_RGB_LED_Controller (
 input clk,
 input rst,
 input wbs_cyc_i,
 input wbs_stb_i,
 input wbs_we_i,
 input [3:0] wbs_sel_i,
 input [31:0] wbs_adr_i,
 input [31:0] wbs_dat_i,
 output [2:0] rgb_led,
 output wbs_ack_o,
 output [31:0] wbs_dat_o
);
 wire [2:0] w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire [3:0] w7;
 wire [31:0] w8;
 wire [31:0] w9;
 wire [31:0] w10;
 assign rgb_led = w0;
 assign w1 = clk;
 assign w2 = rst;
 assign w3 = wbs_cyc_i;
 assign w4 = wbs_stb_i;
 assign w5 = wbs_we_i;
 assign wbs_ack_o = w6;
 assign w7 = wbs_sel_i;
 assign w8 = wbs_adr_i;
 assign w9 = wbs_dat_i;
 assign wbs_dat_o = w10;
 Wishbone_RGB_LED_Controller_code_3 v82600e (
  .rgb_led(w0),
  .clk(w1),
  .rst(w2),
  .wb_cyc_i(w3),
  .wb_stb_i(w4),
  .wb_we_i(w5),
  .wb_ack_o(w6),
  .wb_sel_i(w7),
  .wb_adr_i(w8),
  .wb_dat_i(w9),
  .wb_dat_o(w10)
 );
endmodule

module Wishbone_RGB_LED_Controller_code_3 (
 input clk,
 input rst,
 input wb_cyc_i,
 input wb_stb_i,
 input wb_we_i,
 input [3:0] wb_sel_i,
 input [31:0] wb_adr_i,
 input [31:0] wb_dat_i,
 output wb_ack_o,
 output [31:0] wb_dat_o,
 output [2:0] rgb_led
);
 //@include pwmrgb_wb32.v
 
 pwmrgb_wb32 u_pwmrgb_wb32 (
   .clk(clk),
   .rst(rst),
   .wb_cyc_i(wb_cyc_i),
   .wb_stb_i(wb_stb_i),
   .wb_we_i(wb_we_i),
   .wb_sel_i(wb_sel_i),
   .wb_adr_i(wb_adr_i),
   .wb_dat_i(wb_dat_i),
   .wb_ack_o(wb_ack_o),
   .wb_dat_o(wb_dat_o),
   .rgb_led(rgb_led)
 );
 
endmodule

module Wishbone_VGA_Controller #(
 parameter ARST_LVL = 1'b1,
 parameter LINE_FIFO_AWIDTH = 7
) (
 input clk,
 input rst_bus,
 input rst_sys,
 input pixel_clk,
 input wbs_cyc_i,
 input wbs_stb_i,
 input wbs_we_i,
 input [3:0] wbs_sel_i,
 input [31:0] wbs_adr_i,
 input [31:0] wbs_dat_i,
 input wbm_ack_i,
 input [31:0] wbm_dat_i,
 output intr,
 output [2:0] wbm_cti_o,
 output clk_p_o,
 output hsync_pad_o,
 output vsync_pad_o,
 output [ 7:0] r_pad_o,
 output [ 7:0] g_pad_o,
 output [ 7:0] b_pad_o,
 output wbs_ack_o,
 output [31:0] wbs_dat_o,
 output wbm_cyc_o,
 output wbm_stb_o,
 output wbm_we_o,
 output [3:0] wbm_sel_o,
 output [31:0] wbm_adr_o,
 output [31:0] wbm_dat_o
);
 localparam p7 = ARST_LVL;
 localparam p8 = LINE_FIFO_AWIDTH;
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire [7:0] w4;
 wire [7:0] w5;
 wire [7:0] w6;
 wire w9;
 wire w10;
 wire w11;
 wire w12;
 wire [2:0] w13;
 wire w14;
 wire w15;
 wire w16;
 wire w17;
 wire [3:0] w18;
 wire [31:0] w19;
 wire [31:0] w20;
 wire [31:0] w21;
 wire [31:0] w22;
 wire [3:0] w23;
 wire w24;
 wire w25;
 wire w26;
 wire [31:0] w27;
 wire [31:0] w28;
 wire w29;
 assign intr = w0;
 assign clk_p_o = w1;
 assign hsync_pad_o = w2;
 assign vsync_pad_o = w3;
 assign r_pad_o = w4;
 assign g_pad_o = w5;
 assign b_pad_o = w6;
 assign w9 = clk;
 assign w10 = rst_bus;
 assign w11 = rst_sys;
 assign w12 = pixel_clk;
 assign wbm_cti_o = w13;
 assign w14 = wbs_cyc_i;
 assign w15 = wbs_stb_i;
 assign w16 = wbs_we_i;
 assign wbs_ack_o = w17;
 assign w18 = wbs_sel_i;
 assign w19 = wbs_adr_i;
 assign w20 = wbs_dat_i;
 assign wbs_dat_o = w21;
 assign wbm_adr_o = w22;
 assign wbm_sel_o = w23;
 assign wbm_we_o = w24;
 assign wbm_stb_o = w25;
 assign wbm_cyc_o = w26;
 assign wbm_dat_o = w27;
 assign w28 = wbm_dat_i;
 assign w29 = wbm_ack_i;
 Wishbone_VGA_Controller_code_16 #(
  .ARST_LVL(p7),
  .LINE_FIFO_AWIDTH(p8)
 ) v844683 (
  .wb_inta_o(w0),
  .clk_p_o(w1),
  .hsync_pad_o(w2),
  .vsync_pad_o(w3),
  .r_pad_o(w4),
  .g_pad_o(w5),
  .b_pad_o(w6),
  .wb_clk_i(w9),
  .wb_rst_i(w10),
  .rst_i(w11),
  .clk_p_i(w12),
  .wbm_cti_o(w13),
  .wbs_cyc_i(w14),
  .wbs_stb_i(w15),
  .wbs_we_i(w16),
  .wbs_ack_o(w17),
  .wbs_sel_i(w18),
  .wbs_adr_i(w19),
  .wbs_dat_i(w20),
  .wbs_dat_o(w21),
  .wbm_adr_o(w22),
  .wbm_sel_o(w23),
  .wbm_we_o(w24),
  .wbm_stb_o(w25),
  .wbm_cyc_o(w26),
  .wbm_dat_o(w27),
  .wbm_dat_i(w28),
  .wbm_ack_i(w29)
 );
endmodule

module Wishbone_VGA_Controller_code_16 #(
 parameter ARST_LVL = 0,
 parameter LINE_FIFO_AWIDTH = 0
) (
 input wb_clk_i,
 input wb_rst_i,
 input rst_i,
 input wbs_cyc_i,
 input wbs_stb_i,
 input wbs_we_i,
 input [3:0] wbs_sel_i,
 input [31:0] wbs_adr_i,
 input [31:0] wbs_dat_i,
 input [31:0] wbm_dat_i,
 input wbm_ack_i,
 input wbm_err_i,
 input clk_p_i,
 output wb_inta_o,
 output [31:0] wbs_dat_o,
 output wbs_ack_o,
 output wbs_rty_o,
 output wbs_err_o,
 output wbm_cyc_o,
 output wbm_stb_o,
 output wbm_we_o,
 output [3:0] wbm_sel_o,
 output [31:0] wbm_adr_o,
 output [31:0] wbm_dat_o,
 output [2:0] wbm_cti_o,
 output [1:0] wbm_bte_o,
 output clk_p_o,
 output hsync_pad_o,
 output vsync_pad_o,
 output csync_pad_o,
 output blank_pad_o,
 output [7:0] r_pad_o,
 output [7:0] g_pad_o,
 output [7:0] b_pad_o
);
 //@include vga_lcd/generic_dpram.v
 //@include vga_lcd/generic_spram.v
 //@include vga_lcd/timescale.v
 //@include vga_lcd/vga_clkgen.v
 //@include vga_lcd/vga_colproc.v
 //@include vga_lcd/vga_csm_pb.v
 //@include vga_lcd/vga_cur_cregs.v
 //@include vga_lcd/vga_curproc.v
 //@include vga_lcd/vga_defines.v
 //@include vga_lcd/vga_enh_top.v
 //@include vga_lcd/vga_fifo.v
 //@include vga_lcd/vga_fifo_dc.v
 //@include vga_lcd/vga_pgen.v
 //@include vga_lcd/vga_tgen.v
 //@include vga_lcd/vga_vtim.v
 //@include vga_lcd/vga_wb_master.v
 //@include vga_lcd/vga_wb_slave.v
 
 vga_enh_top #(
   .ARST_LVL(ARST_LVL),
   .LINE_FIFO_AWIDTH(LINE_FIFO_AWIDTH)
 ) u_vga_enh_top (
   .wb_clk_i(wb_clk_i),
   .wb_rst_i(wb_rst_i),
   .rst_i(rst_i),
   .wb_inta_o(wb_inta_o),
   .wbs_adr_i(wbs_adr_i[11:0]),
   .wbs_dat_i(wbs_dat_i),
   .wbs_dat_o(wbs_dat_o),
   .wbs_sel_i(wbs_sel_i),
   .wbs_we_i(wbs_we_i),
   .wbs_stb_i(wbs_stb_i),
   .wbs_cyc_i(wbs_cyc_i),
   .wbs_ack_o(wbs_ack_o),
   .wbs_rty_o(wbs_rty_o),
   .wbs_err_o(wbs_err_o),
   .wbm_adr_o(wbm_adr_o),
   .wbm_dat_i(wbm_dat_i),
   .wbm_cti_o(wbm_cti_o),
   .wbm_bte_o(wbm_bte_o),
   .wbm_sel_o(wbm_sel_o),
   .wbm_we_o(wbm_we_o),
   .wbm_stb_o(wbm_stb_o),
   .wbm_cyc_o(wbm_cyc_o),
   .wbm_ack_i(wbm_ack_i),
   .wbm_err_i(wbm_err_i),
   .clk_p_i(clk_p_i),
   .clk_p_o(clk_p_o),
   .hsync_pad_o(hsync_pad_o),
   .vsync_pad_o(vsync_pad_o),
   .csync_pad_o(csync_pad_o),
   .blank_pad_o(blank_pad_o),
   .r_pad_o(r_pad_o),
   .g_pad_o(g_pad_o),
   .b_pad_o(b_pad_o)
 );
 
 assign wbm_dat_o = 32'b0;
 
endmodule

module Wishbone_SDRAM_8MB_for_EG4S (
 input clk,
 input rst,
 input sdram_clk,
 input [2:0] wb_cit_i,
 input wbs_cyc_i,
 input wbs_stb_i,
 input wbs_we_i,
 input [3:0] wbs_sel_i,
 input [31:0] wbs_adr_i,
 input [31:0] wbs_dat_i,
 output wbs_ack_o,
 output [31:0] wbs_dat_o
);
 wire w0;
 wire w1;
 wire w2;
 wire [2:0] w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire [3:0] w8;
 wire [31:0] w9;
 wire [31:0] w10;
 wire [31:0] w11;
 assign w0 = clk;
 assign w1 = rst;
 assign w2 = sdram_clk;
 assign w3 = wb_cit_i;
 assign w4 = wbs_cyc_i;
 assign w5 = wbs_stb_i;
 assign w6 = wbs_we_i;
 assign wbs_ack_o = w7;
 assign w8 = wbs_sel_i;
 assign w9 = wbs_adr_i;
 assign w10 = wbs_dat_i;
 assign wbs_dat_o = w11;
 Wishbone_SDRAM_8MB_for_EG4S_code_6 ve64021 (
  .clk(w0),
  .rst(w1),
  .sdram_clk(w2),
  .wb_cti_i(w3),
  .wb_cyc_i(w4),
  .wb_stb_i(w5),
  .wb_we_i(w6),
  .wb_ack_o(w7),
  .wb_sel_i(w8),
  .wb_adr_i(w9),
  .wb_dat_i(w10),
  .wb_dat_o(w11)
 );
endmodule

module Wishbone_SDRAM_8MB_for_EG4S_code_6 (
 input clk,
 input rst,
 input wb_cyc_i,
 input wb_stb_i,
 input wb_we_i,
 input [3:0] wb_sel_i,
 input [31:0] wb_adr_i,
 input [31:0] wb_dat_i,
 input sdram_clk,
 input [2:0] wb_cti_i,
 output wb_ack_o,
 output [31:0] wb_dat_o
);
 //@include sdr_ctrl/sdrc_bank_ctl.v
 //@include sdr_ctrl/sdrc_bank_fsm.v
 //@include sdr_ctrl/sdrc_bs_convert.v
 //@include sdr_ctrl/sdrc_core.v
 //@include sdr_ctrl/sdrc_define.v
 //@include sdr_ctrl/sdrc_req_gen.v
 //@include sdr_ctrl/sdrc_xfr_ctl.v
 
 //@include sdr_ctrl/async_fifo.v
 //@include sdr_ctrl/sync_fifo.v
 //@include sdr_ctrl/sdrc_top.v
 //@include sdr_ctrl/wb2sdrc.v
 
 wire [12:0] sdram_addr_w;
 
 wire sdram_ras_n;
 wire sdram_cas_n;
 wire sdram_we_n;
 wire [10:0] sdram_addr;
 wire [ 1:0] sdram_ba;
 wire [31:0] sdram_dq;
 wire sdram_cs_n;
 wire [ 3:0] sdram_dm;
 wire sdram_cke;
 
 assign sdram_addr = sdram_addr_w[10:0];
 
 sdrc_top #(
 	.SDR_DW(32),
 	.SDR_BW(4)
 ) dram0 (
 	.cfg_sdr_width(2'b00),
 	.cfg_colbits(2'b00),
 
 	.wb_rst_i(rst),
 	.wb_clk_i(clk),
 
 	.wb_stb_i(wb_stb_i),
 	.wb_ack_o(wb_ack_o),
 	.wb_addr_i(wb_adr_i[27:2]),
 	.wb_we_i(wb_we_i),
 	.wb_dat_i(wb_dat_i),
 	.wb_sel_i(wb_sel_i),
 	.wb_dat_o(wb_dat_o),
 	.wb_cyc_i(wb_cyc_i),
 	.wb_cti_i(wb_cti_i),
 
 	.sdram_clk(sdram_clk),
 	.sdram_resetn(~rst),
 	.sdr_cs_n(sdram_cs_n),
 	.sdr_cke(sdram_cke),
 	.sdr_ras_n(sdram_ras_n),
 	.sdr_cas_n(sdram_cas_n),
 	.sdr_we_n(sdram_we_n),
 	.sdr_dqm(sdram_dm),
 	.sdr_ba(sdram_ba),
 	.sdr_addr(sdram_addr_w),
 	.sdr_dq(sdram_dq),
 
 	.sdr_init_done(),
 	.cfg_req_depth(2'h3),
 	.cfg_sdr_en(1'b1),
 	.cfg_sdr_mode_reg(13'h033),
 	.cfg_sdr_tras_d(4'h4),
 	.cfg_sdr_trp_d(4'h2),
 	.cfg_sdr_trcd_d(4'h2),
 	.cfg_sdr_cas(3'h3),
 	.cfg_sdr_trcar_d(4'h9),
 	.cfg_sdr_twr_d(4'h2),
 	.cfg_sdr_rfsh(12'h100),
 	.cfg_sdr_rfmax(3'h6)
 );
 
 EG_PHY_SDRAM_2M_32 u_EG_PHY_SDRAM_2M_32 (
   .clk(~sdram_clk),
   .ras_n(sdram_ras_n),
   .cas_n(sdram_cas_n),
   .we_n(sdram_we_n),
   .addr(sdram_addr),
   .ba(sdram_ba),
   .dq(sdram_dq),
   .cs_n(sdram_cs_n),
   .dm0(sdram_dm[0]),
   .dm1(sdram_dm[1]),
   .dm2(sdram_dm[2]),
   .dm3(sdram_dm[3]),
   .cke(sdram_cke)
 );
endmodule

module Wishbone_Arbiter_2_1 #(
 parameter DATA_WIDTH = 32,
 parameter ADDR_WIDTH = 32,
 parameter SELECT_WIDTH = (DATA_WIDTH/8),
 parameter ARB_TYPE = "PRIORITY",
 parameter LSB_PRIORITY = "HIGH"
) (
 input clk,
 input rst,
 input wbm0_cyc_i,
 input wbm0_stb_i,
 input wbm0_we_i,
 input [3:0] wbm0_sel_i,
 input [31:0] wbm0_adr_i,
 input [31:0] wbm0_dat_i,
 input wbm1_cyc_i,
 input wbm1_stb_i,
 input wbm1_we_i,
 input [3:0] wbm1_sel_i,
 input [31:0] wbm1_adr_i,
 input [31:0] wbm1_dat_i,
 input wbs_ack_i,
 input [31:0] wbs_dat_i,
 output wbm0_arb_sel,
 output wbm1_arb_sel,
 output wbm0_ack_o,
 output [31:0] wbm0_dat_o,
 output wbm1_ack_o,
 output [31:0] wbm1_dat_o,
 output wbs_cyc_o,
 output wbs_stb_o,
 output wbs_we_o,
 output [3:0] wbs_sel_o,
 output [31:0] wbs_adr_o,
 output [31:0] wbs_dat_o
);
 localparam p2 = DATA_WIDTH;
 localparam p3 = ADDR_WIDTH;
 localparam p4 = SELECT_WIDTH;
 localparam p5 = ARB_TYPE;
 localparam p6 = LSB_PRIORITY;
 wire w0;
 wire w1;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 wire w12;
 wire [3:0] w13;
 wire [31:0] w14;
 wire [31:0] w15;
 wire [31:0] w16;
 wire w17;
 wire w18;
 wire w19;
 wire w20;
 wire [3:0] w21;
 wire [31:0] w22;
 wire [31:0] w23;
 wire [31:0] w24;
 wire [3:0] w25;
 wire w26;
 wire w27;
 wire w28;
 wire [31:0] w29;
 wire [31:0] w30;
 wire [31:0] w31;
 wire w32;
 assign w0 = rst;
 assign w1 = clk;
 assign wbm0_arb_sel = w7;
 assign wbm1_arb_sel = w8;
 assign w9 = wbm1_cyc_i;
 assign w10 = wbm1_stb_i;
 assign w11 = wbm1_we_i;
 assign wbm1_ack_o = w12;
 assign w13 = wbm1_sel_i;
 assign w14 = wbm1_adr_i;
 assign w15 = wbm1_dat_i;
 assign wbm1_dat_o = w16;
 assign w17 = wbm0_cyc_i;
 assign w18 = wbm0_stb_i;
 assign w19 = wbm0_we_i;
 assign wbm0_ack_o = w20;
 assign w21 = wbm0_sel_i;
 assign w22 = wbm0_adr_i;
 assign w23 = wbm0_dat_i;
 assign wbm0_dat_o = w24;
 assign wbs_sel_o = w25;
 assign wbs_we_o = w26;
 assign wbs_stb_o = w27;
 assign wbs_cyc_o = w28;
 assign wbs_dat_o = w29;
 assign wbs_adr_o = w30;
 assign w31 = wbs_dat_i;
 assign w32 = wbs_ack_i;
 Wishbone_Arbiter_2_1_code_15 #(
  .DATA_WIDTH(p2),
  .ADDR_WIDTH(p3),
  .SELECT_WIDTH(p4),
  .ARB_TYPE(p5),
  .LSB_PRIORITY(p6)
 ) v1c88c8 (
  .rst(w0),
  .clk(w1),
  .wbm0_arb_sel(w7),
  .wbm1_arb_sel(w8),
  .wbm1_cyc_i(w9),
  .wbm1_stb_i(w10),
  .wbm1_we_i(w11),
  .wbm1_ack_o(w12),
  .wbm1_sel_i(w13),
  .wbm1_adr_i(w14),
  .wbm1_dat_i(w15),
  .wbm1_dat_o(w16),
  .wbm0_cyc_i(w17),
  .wbm0_stb_i(w18),
  .wbm0_we_i(w19),
  .wbm0_ack_o(w20),
  .wbm0_sel_i(w21),
  .wbm0_adr_i(w22),
  .wbm0_dat_i(w23),
  .wbm0_dat_o(w24),
  .wbs_sel_o(w25),
  .wbs_we_o(w26),
  .wbs_stb_o(w27),
  .wbs_cyc_o(w28),
  .wbs_dat_o(w29),
  .wbs_adr_o(w30),
  .wbs_dat_i(w31),
  .wbs_ack_i(w32)
 );
endmodule

module Wishbone_Arbiter_2_1_code_15 #(
 parameter DATA_WIDTH = 0,
 parameter ADDR_WIDTH = 0,
 parameter SELECT_WIDTH = 0,
 parameter ARB_TYPE = 0,
 parameter LSB_PRIORITY = 0
) (
 input clk,
 input rst,
 input [ADDR_WIDTH-1:0] wbm0_adr_i,
 input [DATA_WIDTH-1:0] wbm0_dat_i,
 input wbm0_we_i,
 input [SELECT_WIDTH-1:0] wbm0_sel_i,
 input wbm0_stb_i,
 input wbm0_cyc_i,
 input [ADDR_WIDTH-1:0] wbm1_adr_i,
 input [DATA_WIDTH-1:0] wbm1_dat_i,
 input wbm1_we_i,
 input [SELECT_WIDTH-1:0] wbm1_sel_i,
 input wbm1_stb_i,
 input wbm1_cyc_i,
 input [DATA_WIDTH-1:0] wbs_dat_i,
 input wbs_ack_i,
 input wbs_err_i,
 input wbs_rty_i,
 output wbm0_arb_sel,
 output [DATA_WIDTH-1:0] wbm0_dat_o,
 output wbm0_ack_o,
 output wbm0_err_o,
 output wbm0_rty_o,
 output wbm1_arb_sel,
 output [DATA_WIDTH-1:0] wbm1_dat_o,
 output wbm1_ack_o,
 output wbm1_err_o,
 output wbm1_rty_o,
 output [ADDR_WIDTH-1:0] wbs_adr_o,
 output [DATA_WIDTH-1:0] wbs_dat_o,
 output wbs_we_o,
 output [SELECT_WIDTH-1:0] wbs_sel_o,
 output wbs_stb_o,
 output wbs_cyc_o
);
 //@include wb_arbiter_2.v
 //@include priority_encoder.v
 //@include arbiter.v
 
 wb_arbiter_2 #(
   .DATA_WIDTH(DATA_WIDTH),
   .ADDR_WIDTH(ADDR_WIDTH),
   .SELECT_WIDTH(SELECT_WIDTH),
   .ARB_TYPE(ARB_TYPE),
   .LSB_PRIORITY(LSB_PRIORITY)
 ) u_wb_arbiter_2 (
   .clk(clk),
   .rst(rst),
   .wbm0_adr_i(wbm0_adr_i),
   .wbm0_dat_i(wbm0_dat_i),
   .wbm0_dat_o(wbm0_dat_o),
   .wbm0_we_i(wbm0_we_i),
   .wbm0_sel_i(wbm0_sel_i),
   .wbm0_stb_i(wbm0_stb_i),
   .wbm0_ack_o(wbm0_ack_o),
   .wbm0_err_o(wbm0_err_o),
   .wbm0_rty_o(wbm0_rty_o),
   .wbm0_cyc_i(wbm0_cyc_i),
   .wbm0_arb_sel(wbm0_arb_sel),
   .wbm1_adr_i(wbm1_adr_i),
   .wbm1_dat_i(wbm1_dat_i),
   .wbm1_dat_o(wbm1_dat_o),
   .wbm1_we_i(wbm1_we_i),
   .wbm1_sel_i(wbm1_sel_i),
   .wbm1_stb_i(wbm1_stb_i),
   .wbm1_ack_o(wbm1_ack_o),
   .wbm1_err_o(wbm1_err_o),
   .wbm1_rty_o(wbm1_rty_o),
   .wbm1_cyc_i(wbm1_cyc_i),
   .wbm1_arb_sel(wbm1_arb_sel),
   .wbs_adr_o(wbs_adr_o),
   .wbs_dat_i(wbs_dat_i),
   .wbs_dat_o(wbs_dat_o),
   .wbs_we_o(wbs_we_o),
   .wbs_sel_o(wbs_sel_o),
   .wbs_stb_o(wbs_stb_o),
   .wbs_ack_i(wbs_ack_i),
   .wbs_err_i(wbs_err_i),
   .wbs_rty_i(wbs_rty_i),
   .wbs_cyc_o(wbs_cyc_o)
 );
 
endmodule

module Wishbone_Mux_1_4 #(
 parameter WBS0_ADDR_BASE = 32'h0000_0000,
 parameter WBS0_ADDR_MASK = 32'hC000_0000,
 parameter WBS1_ADDR_BASE = 32'h4000_0000,
 parameter WBS1_ADDR_MASK = 32'hC000_0000,
 parameter WBS2_ADDR_BASE = 32'h8000_0000,
 parameter WBS2_ADDR_MASK = 32'hC000_0000,
 parameter WBS3_ADDR_BASE = 32'hC000_0000,
 parameter WBS3_ADDR_MASK = 32'hC000_0000,
 parameter DATA_WIDTH = 32,
 parameter ADDR_WIDTH = 32,
 parameter SELECT_WIDTH = (DATA_WIDTH/8)
) (
 input clk,
 input rst,
 input wbm_cyc_i,
 input wbm_stb_i,
 input wbm_we_i,
 input [3:0] wbm_sel_i,
 input [31:0] wbm_adr_i,
 input [31:0] wbm_dat_i,
 input wbs0_ack_i,
 input [31:0] wbs0_dat_i,
 input wbs1_ack_i,
 input [31:0] wbs1_dat_i,
 input wbs2_ack_i,
 input [31:0] wbs2_dat_i,
 input wbs3_ack_i,
 input [31:0] wbs3_dat_i,
 output wbm_ack_o,
 output [31:0] wbm_dat_o,
 output wbs0_cyc_o,
 output wbs0_stb_o,
 output wbs0_we_o,
 output [3:0] wbs0_sel_o,
 output [31:0] wbs0_adr_o,
 output [31:0] wbs0_dat_o,
 output wbs1_cyc_o,
 output wbs1_stb_o,
 output wbs1_we_o,
 output [3:0] wbs1_sel_o,
 output [31:0] wbs1_adr_o,
 output [31:0] wbs1_dat_o,
 output wbs2_cyc_o,
 output wbs2_stb_o,
 output wbs2_we_o,
 output [3:0] wbs2_sel_o,
 output [31:0] wbs2_adr_o,
 output [31:0] wbs2_dat_o,
 output wbs3_cyc_o,
 output wbs3_stb_o,
 output wbs3_we_o,
 output [3:0] wbs3_sel_o,
 output [31:0] wbs3_adr_o,
 output [31:0] wbs3_dat_o
);
 localparam p0 = WBS0_ADDR_BASE;
 localparam p1 = WBS0_ADDR_MASK;
 localparam p2 = WBS1_ADDR_BASE;
 localparam p3 = WBS1_ADDR_MASK;
 localparam p12 = WBS2_ADDR_BASE;
 localparam p13 = WBS2_ADDR_MASK;
 localparam p14 = WBS3_ADDR_BASE;
 localparam p15 = WBS3_ADDR_MASK;
 localparam p18 = DATA_WIDTH;
 localparam p19 = ADDR_WIDTH;
 localparam p20 = SELECT_WIDTH;
 wire [31:0] w4;
 wire [31:0] w5;
 wire [31:0] w6;
 wire [31:0] w7;
 wire [31:0] w8;
 wire [31:0] w9;
 wire [31:0] w10;
 wire [31:0] w11;
 wire w16;
 wire w17;
 wire w21;
 wire [3:0] w22;
 wire [31:0] w23;
 wire [31:0] w24;
 wire w25;
 wire w26;
 wire [31:0] w27;
 wire w28;
 wire [31:0] w29;
 wire [3:0] w30;
 wire [31:0] w31;
 wire w32;
 wire w33;
 wire w34;
 wire [31:0] w35;
 wire w36;
 wire w37;
 wire w38;
 wire w39;
 wire w40;
 wire [3:0] w41;
 wire [31:0] w42;
 wire [31:0] w43;
 wire [31:0] w44;
 wire [31:0] w45;
 wire [31:0] w46;
 wire w47;
 wire [3:0] w48;
 wire w49;
 wire w50;
 wire [31:0] w51;
 wire w52;
 wire [31:0] w53;
 wire [31:0] w54;
 wire w55;
 wire [3:0] w56;
 wire w57;
 wire w58;
 wire [31:0] w59;
 wire w60;
 assign w16 = clk;
 assign w17 = rst;
 assign wbs0_cyc_o = w21;
 assign wbs0_sel_o = w22;
 assign wbs0_adr_o = w23;
 assign wbs0_dat_o = w24;
 assign wbs0_we_o = w25;
 assign wbs0_stb_o = w26;
 assign w27 = wbs0_dat_i;
 assign w28 = wbs0_ack_i;
 assign wbs1_adr_o = w29;
 assign wbs1_sel_o = w30;
 assign wbs1_dat_o = w31;
 assign wbs1_we_o = w32;
 assign wbs1_stb_o = w33;
 assign wbs1_cyc_o = w34;
 assign w35 = wbs1_dat_i;
 assign w36 = wbs1_ack_i;
 assign w37 = wbm_cyc_i;
 assign w38 = wbm_stb_i;
 assign w39 = wbm_we_i;
 assign wbm_ack_o = w40;
 assign w41 = wbm_sel_i;
 assign w42 = wbm_adr_i;
 assign w43 = wbm_dat_i;
 assign wbm_dat_o = w44;
 assign wbs3_adr_o = w45;
 assign wbs3_dat_o = w46;
 assign wbs3_we_o = w47;
 assign wbs3_sel_o = w48;
 assign wbs3_stb_o = w49;
 assign wbs3_cyc_o = w50;
 assign w51 = wbs3_dat_i;
 assign w52 = wbs3_ack_i;
 assign wbs2_adr_o = w53;
 assign wbs2_dat_o = w54;
 assign wbs2_we_o = w55;
 assign wbs2_sel_o = w56;
 assign wbs2_stb_o = w57;
 assign wbs2_cyc_o = w58;
 assign w59 = wbs2_dat_i;
 assign w60 = wbs2_ack_i;
 Wishbone_Mux_1_4_code_18 #(
  .wbs0_addr_p(p0),
  .wbs0_addr_msk_p(p1),
  .wbs1_addr_p(p2),
  .wbs1_addr_msk_p(p3),
  .wbs2_addr_p(p12),
  .wbs2_addr_msk_p(p13),
  .wbs3_addr_p(p14),
  .wbs3_addr_msk_p(p15)
 ) vce27c1 (
  .wbs0_addr(w4),
  .wbs0_addr_msk(w5),
  .wbs1_addr(w6),
  .wbs1_addr_msk(w7),
  .wbs2_addr(w8),
  .wbs2_addr_msk(w9),
  .wbs3_addr(w10),
  .wbs3_addr_msk(w11)
 );
 Wishbone_Mux_1_4_code_24 #(
  .DATA_WIDTH(p18),
  .ADDR_WIDTH(p19),
  .SELECT_WIDTH(p20)
 ) v694197 (
  .wbs0_addr(w4),
  .wbs0_addr_msk(w5),
  .wbs1_addr(w6),
  .wbs1_addr_msk(w7),
  .wbs2_addr(w8),
  .wbs2_addr_msk(w9),
  .wbs3_addr(w10),
  .wbs3_addr_msk(w11),
  .clk(w16),
  .rst(w17),
  .wbs0_cyc_o(w21),
  .wbs0_sel_o(w22),
  .wbs0_adr_o(w23),
  .wbs0_dat_o(w24),
  .wbs0_we_o(w25),
  .wbs0_stb_o(w26),
  .wbs0_dat_i(w27),
  .wbs0_ack_i(w28),
  .wbs1_adr_o(w29),
  .wbs1_sel_o(w30),
  .wbs1_dat_o(w31),
  .wbs1_we_o(w32),
  .wbs1_stb_o(w33),
  .wbs1_cyc_o(w34),
  .wbs1_dat_i(w35),
  .wbs1_ack_i(w36),
  .wbm_cyc_i(w37),
  .wbm_stb_i(w38),
  .wbm_we_i(w39),
  .wbm_ack_o(w40),
  .wbm_sel_i(w41),
  .wbm_adr_i(w42),
  .wbm_dat_i(w43),
  .wbm_dat_o(w44),
  .wbs3_adr_o(w45),
  .wbs3_dat_o(w46),
  .wbs3_we_o(w47),
  .wbs3_sel_o(w48),
  .wbs3_stb_o(w49),
  .wbs3_cyc_o(w50),
  .wbs3_dat_i(w51),
  .wbs3_ack_i(w52),
  .wbs2_adr_o(w53),
  .wbs2_dat_o(w54),
  .wbs2_we_o(w55),
  .wbs2_sel_o(w56),
  .wbs2_stb_o(w57),
  .wbs2_cyc_o(w58),
  .wbs2_dat_i(w59),
  .wbs2_ack_i(w60)
 );
endmodule

module Wishbone_Mux_1_4_code_18 #(
 parameter wbs0_addr_p = 0,
 parameter wbs0_addr_msk_p = 0,
 parameter wbs1_addr_p = 0,
 parameter wbs1_addr_msk_p = 0,
 parameter wbs2_addr_p = 0,
 parameter wbs2_addr_msk_p = 0,
 parameter wbs3_addr_p = 0,
 parameter wbs3_addr_msk_p = 0
) (
 output [31:0] wbs0_addr,
 output [31:0] wbs0_addr_msk,
 output [31:0] wbs1_addr,
 output [31:0] wbs1_addr_msk,
 output [31:0] wbs2_addr,
 output [31:0] wbs2_addr_msk,
 output [31:0] wbs3_addr,
 output [31:0] wbs3_addr_msk
);
 assign wbs0_addr = wbs0_addr_p;
 assign wbs0_addr_msk = wbs0_addr_msk_p;
 assign wbs1_addr = wbs1_addr_p;
 assign wbs1_addr_msk = wbs1_addr_msk_p;
 assign wbs2_addr = wbs2_addr_p;
 assign wbs2_addr_msk = wbs2_addr_msk_p;
 assign wbs3_addr = wbs3_addr_p;
 assign wbs3_addr_msk = wbs3_addr_msk_p;
endmodule

module Wishbone_Mux_1_4_code_24 #(
 parameter DATA_WIDTH = 0,
 parameter ADDR_WIDTH = 0,
 parameter SELECT_WIDTH = 0
) (
 input clk,
 input rst,
 input [ADDR_WIDTH-1:0] wbm_adr_i,
 input [DATA_WIDTH-1:0] wbm_dat_i,
 input wbm_we_i,
 input [SELECT_WIDTH-1:0] wbm_sel_i,
 input wbm_stb_i,
 input wbm_cyc_i,
 input [DATA_WIDTH-1:0] wbs0_dat_i,
 input wbs0_ack_i,
 input wbs0_err_i,
 input wbs0_rty_i,
 input [ADDR_WIDTH-1:0] wbs0_addr,
 input [ADDR_WIDTH-1:0] wbs0_addr_msk,
 input [DATA_WIDTH-1:0] wbs1_dat_i,
 input wbs1_ack_i,
 input wbs1_err_i,
 input wbs1_rty_i,
 input [ADDR_WIDTH-1:0] wbs1_addr,
 input [ADDR_WIDTH-1:0] wbs1_addr_msk,
 input [DATA_WIDTH-1:0] wbs2_dat_i,
 input wbs2_ack_i,
 input wbs2_err_i,
 input wbs2_rty_i,
 input [ADDR_WIDTH-1:0] wbs2_addr,
 input [ADDR_WIDTH-1:0] wbs2_addr_msk,
 input [DATA_WIDTH-1:0] wbs3_dat_i,
 input wbs3_ack_i,
 input wbs3_err_i,
 input wbs3_rty_i,
 input [ADDR_WIDTH-1:0] wbs3_addr,
 input [ADDR_WIDTH-1:0] wbs3_addr_msk,
 output [DATA_WIDTH-1:0] wbm_dat_o,
 output wbm_ack_o,
 output wbm_err_o,
 output wbm_rty_o,
 output [ADDR_WIDTH-1:0] wbs0_adr_o,
 output [DATA_WIDTH-1:0] wbs0_dat_o,
 output wbs0_we_o,
 output [SELECT_WIDTH-1:0] wbs0_sel_o,
 output wbs0_stb_o,
 output wbs0_cyc_o,
 output [ADDR_WIDTH-1:0] wbs1_adr_o,
 output [DATA_WIDTH-1:0] wbs1_dat_o,
 output wbs1_we_o,
 output [SELECT_WIDTH-1:0] wbs1_sel_o,
 output wbs1_stb_o,
 output wbs1_cyc_o,
 output [ADDR_WIDTH-1:0] wbs2_adr_o,
 output [DATA_WIDTH-1:0] wbs2_dat_o,
 output wbs2_we_o,
 output [SELECT_WIDTH-1:0] wbs2_sel_o,
 output wbs2_stb_o,
 output wbs2_cyc_o,
 output [ADDR_WIDTH-1:0] wbs3_adr_o,
 output [DATA_WIDTH-1:0] wbs3_dat_o,
 output wbs3_we_o,
 output [SELECT_WIDTH-1:0] wbs3_sel_o,
 output wbs3_stb_o,
 output wbs3_cyc_o
);
 //@include wb_mux_4.v
 
 wb_mux_4 #(
   .DATA_WIDTH(DATA_WIDTH),
   .ADDR_WIDTH(ADDR_WIDTH),
   .SELECT_WIDTH(SELECT_WIDTH)
 ) u_wb_mux_4 (
   .clk(clk),
   .rst(rst),
   .wbm_adr_i(wbm_adr_i),
   .wbm_dat_i(wbm_dat_i),
   .wbm_dat_o(wbm_dat_o),
   .wbm_we_i(wbm_we_i),
   .wbm_sel_i(wbm_sel_i),
   .wbm_stb_i(wbm_stb_i),
   .wbm_ack_o(wbm_ack_o),
   .wbm_err_o(wbm_err_o),
   .wbm_rty_o(wbm_rty_o),
   .wbm_cyc_i(wbm_cyc_i),
   .wbs0_adr_o(wbs0_adr_o),
   .wbs0_dat_i(wbs0_dat_i),
   .wbs0_dat_o(wbs0_dat_o),
   .wbs0_we_o(wbs0_we_o),
   .wbs0_sel_o(wbs0_sel_o),
   .wbs0_stb_o(wbs0_stb_o),
   .wbs0_ack_i(wbs0_ack_i),
   .wbs0_err_i(wbs0_err_i),
   .wbs0_rty_i(wbs0_rty_i),
   .wbs0_cyc_o(wbs0_cyc_o),
   .wbs0_addr(wbs0_addr),
   .wbs0_addr_msk(wbs0_addr_msk),
   .wbs1_adr_o(wbs1_adr_o),
   .wbs1_dat_i(wbs1_dat_i),
   .wbs1_dat_o(wbs1_dat_o),
   .wbs1_we_o(wbs1_we_o),
   .wbs1_sel_o(wbs1_sel_o),
   .wbs1_stb_o(wbs1_stb_o),
   .wbs1_ack_i(wbs1_ack_i),
   .wbs1_err_i(wbs1_err_i),
   .wbs1_rty_i(wbs1_rty_i),
   .wbs1_cyc_o(wbs1_cyc_o),
   .wbs1_addr(wbs1_addr),
   .wbs1_addr_msk(wbs1_addr_msk),
   .wbs2_adr_o(wbs2_adr_o),
   .wbs2_dat_i(wbs2_dat_i),
   .wbs2_dat_o(wbs2_dat_o),
   .wbs2_we_o(wbs2_we_o),
   .wbs2_sel_o(wbs2_sel_o),
   .wbs2_stb_o(wbs2_stb_o),
   .wbs2_ack_i(wbs2_ack_i),
   .wbs2_err_i(wbs2_err_i),
   .wbs2_rty_i(wbs2_rty_i),
   .wbs2_cyc_o(wbs2_cyc_o),
   .wbs2_addr(wbs2_addr),
   .wbs2_addr_msk(wbs2_addr_msk),
   .wbs3_adr_o(wbs3_adr_o),
   .wbs3_dat_i(wbs3_dat_i),
   .wbs3_dat_o(wbs3_dat_o),
   .wbs3_we_o(wbs3_we_o),
   .wbs3_sel_o(wbs3_sel_o),
   .wbs3_stb_o(wbs3_stb_o),
   .wbs3_ack_i(wbs3_ack_i),
   .wbs3_err_i(wbs3_err_i),
   .wbs3_rty_i(wbs3_rty_i),
   .wbs3_cyc_o(wbs3_cyc_o),
   .wbs3_addr(wbs3_addr),
   .wbs3_addr_msk(wbs3_addr_msk)
 );
 
endmodule

module PicoMem_To_Wishbone_Adapter (
 input clk,
 input resetn,
 input mem_valid,
 input [31:0] mem_addr,
 input [31:0] mem_wdata,
 input [3:0] mem_wstrb,
 input wbm_ack_i,
 input [31:0] wbm_dat_i,
 output mem_ready,
 output [31:0] mem_rdata,
 output wbm_cyc_o,
 output wbm_stb_o,
 output wbm_we_o,
 output [3:0] wbm_sel_o,
 output [31:0] wbm_adr_o,
 output [31:0] wbm_dat_o
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire [31:0] w4;
 wire [31:0] w5;
 wire [3:0] w6;
 wire [31:0] w7;
 wire w8;
 wire w9;
 wire w10;
 wire [3:0] w11;
 wire [31:0] w12;
 wire [31:0] w13;
 wire w14;
 wire [31:0] w15;
 assign w0 = clk;
 assign w1 = resetn;
 assign w2 = mem_valid;
 assign mem_ready = w3;
 assign w4 = mem_addr;
 assign w5 = mem_wdata;
 assign w6 = mem_wstrb;
 assign mem_rdata = w7;
 assign wbm_cyc_o = w8;
 assign wbm_stb_o = w9;
 assign wbm_we_o = w10;
 assign wbm_sel_o = w11;
 assign wbm_adr_o = w12;
 assign wbm_dat_o = w13;
 assign w14 = wbm_ack_i;
 assign w15 = wbm_dat_i;
 PicoMem_To_Wishbone_Adapter_code_6 vbdae9f (
  .clk(w0),
  .resetn(w1),
  .mem_valid(w2),
  .mem_ready(w3),
  .mem_addr(w4),
  .mem_wdata(w5),
  .mem_wstrb(w6),
  .mem_rdata(w7),
  .wbm_cyc_o(w8),
  .wbm_stb_o(w9),
  .wbm_we_o(w10),
  .wbm_sel_o(w11),
  .wbm_adr_o(w12),
  .wbm_dat_o(w13),
  .wbm_ack_i(w14),
  .wbm_dat_i(w15)
 );
endmodule

module PicoMem_To_Wishbone_Adapter_code_6 (
 input clk,
 input resetn,
 input mem_valid,
 input [31:0] mem_addr,
 input [31:0] mem_wdata,
 input [3:0] mem_wstrb,
 input wbm_ack_i,
 input [31:0] wbm_dat_i,
 output wbm_cyc_o,
 output wbm_stb_o,
 output wbm_we_o,
 output [3:0] wbm_sel_o,
 output [31:0] wbm_adr_o,
 output [31:0] wbm_dat_o,
 output mem_ready,
 output [31:0] mem_rdata
);
 localparam IDLE = 2'b00;
 localparam WBSTART = 2'b01;
 localparam WBEND = 2'b10;
 
 reg [31:0] wbm_adr_o_r;
 reg [31:0] wbm_dat_o_r;
 reg wbm_we_o_r;
 reg [3:0] wbm_sel_o_r;
 reg wbm_stb_o_r;
 reg wbm_cyc_o_r;
 reg mem_ready_r;
 reg [31:0] mem_rdata_r;
 
 reg [1:0] state;
 
 wire we;
 assign we = (mem_wstrb[0] | mem_wstrb[1] | mem_wstrb[2] | mem_wstrb[3]);
 
 always @(posedge clk) begin
 	if (!resetn) begin
 		wbm_adr_o_r <= 0;
 		wbm_dat_o_r <= 0;
 		wbm_we_o_r <= 0;
 		wbm_sel_o_r <= 0;
 		wbm_stb_o_r <= 0;
 		wbm_cyc_o_r <= 0;
 		mem_ready_r <= 0;
 		mem_rdata_r <= 0;
 		state <= IDLE;
 	end else begin
 		case (state)
 			IDLE: begin
 				if (mem_valid) begin
 					wbm_adr_o_r <= mem_addr;
 					wbm_dat_o_r <= mem_wdata;
 					wbm_we_o_r <= we;
 					wbm_sel_o_r <= we ? mem_wstrb : 4'b1111;
 
 					wbm_stb_o_r <= 1'b1;
 					wbm_cyc_o_r <= 1'b1;
 					state <= WBSTART;
 				end else begin
 					mem_ready_r <= 1'b0;
 
 					wbm_stb_o_r <= 1'b0;
 					wbm_cyc_o_r <= 1'b0;
 					wbm_we_o_r <= 1'b0;
 				end
 			end
 			WBSTART:begin
 				if (wbm_ack_i) begin
 					mem_rdata_r <= wbm_dat_i;
 					mem_ready_r <= 1'b1;
 
 					state <= WBEND;
 
 					wbm_stb_o_r <= 1'b0;
 					wbm_cyc_o_r <= 1'b0;
 					wbm_we_o_r <= 1'b0;
 				end
 			end
 			WBEND: begin
 				mem_ready_r <= 1'b0;
 
 				state <= IDLE;
 			end
 			default:
 				state <= IDLE;
 		endcase
 	end
 end
 
 
 assign wbm_adr_o = wbm_adr_o_r;
 assign wbm_dat_o = wbm_dat_o_r;
 assign wbm_we_o  = wbm_we_o_r;
 assign wbm_sel_o = wbm_sel_o_r;
 assign wbm_stb_o = wbm_stb_o_r;
 assign wbm_cyc_o = wbm_cyc_o_r;
 assign mem_ready = mem_ready_r;
 assign mem_rdata = mem_rdata_r;
endmodule

module Wishbone_Async_Reg #(
 parameter DATA_WIDTH = 32,
 parameter ADDR_WIDTH = 32,
 parameter SELECT_WIDTH = (DATA_WIDTH/8)
) (
 input wbm_clk,
 input wbm_rst,
 input wbs_clk,
 input wbs_rst,
 input wbm_cyc_i,
 input wbm_stb_i,
 input wbm_we_i,
 input [3:0] wbm_sel_i,
 input [31:0] wbm_adr_i,
 input [31:0] wbm_dat_i,
 input wbs_ack_i,
 input [31:0] wbs_dat_i,
 output wbm_ack_o,
 output [31:0] wbm_dat_o,
 output wbs_cyc_o,
 output wbs_stb_o,
 output wbs_we_o,
 output [3:0] wbs_sel_o,
 output [31:0] wbs_adr_o,
 output [31:0] wbs_dat_o
);
 localparam p0 = DATA_WIDTH;
 localparam p1 = ADDR_WIDTH;
 localparam p2 = SELECT_WIDTH;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire [3:0] w10;
 wire [31:0] w11;
 wire [31:0] w12;
 wire w13;
 wire [31:0] w14;
 wire w15;
 wire w16;
 wire w17;
 wire w18;
 wire [3:0] w19;
 wire [31:0] w20;
 wire [31:0] w21;
 wire [31:0] w22;
 assign w3 = wbm_rst;
 assign w4 = wbm_clk;
 assign w5 = wbs_clk;
 assign w6 = wbs_rst;
 assign wbs_cyc_o = w7;
 assign wbs_stb_o = w8;
 assign wbs_we_o = w9;
 assign wbs_sel_o = w10;
 assign wbs_adr_o = w11;
 assign wbs_dat_o = w12;
 assign w13 = wbs_ack_i;
 assign w14 = wbs_dat_i;
 assign w15 = wbm_cyc_i;
 assign w16 = wbm_stb_i;
 assign w17 = wbm_we_i;
 assign wbm_ack_o = w18;
 assign w19 = wbm_sel_i;
 assign w20 = wbm_adr_i;
 assign w21 = wbm_dat_i;
 assign wbm_dat_o = w22;
 Wishbone_Async_Reg_code_11 #(
  .DATA_WIDTH(p0),
  .ADDR_WIDTH(p1),
  .SELECT_WIDTH(p2)
 ) v466440 (
  .wbm_rst(w3),
  .wbm_clk(w4),
  .wbs_clk(w5),
  .wbs_rst(w6),
  .wbs_cyc_o(w7),
  .wbs_stb_o(w8),
  .wbs_we_o(w9),
  .wbs_sel_o(w10),
  .wbs_adr_o(w11),
  .wbs_dat_o(w12),
  .wbs_ack_i(w13),
  .wbs_dat_i(w14),
  .wbm_cyc_i(w15),
  .wbm_stb_i(w16),
  .wbm_we_i(w17),
  .wbm_ack_o(w18),
  .wbm_sel_i(w19),
  .wbm_adr_i(w20),
  .wbm_dat_i(w21),
  .wbm_dat_o(w22)
 );
endmodule

module Wishbone_Async_Reg_code_11 #(
 parameter DATA_WIDTH = 0,
 parameter ADDR_WIDTH = 0,
 parameter SELECT_WIDTH = 0
) (
 input wbm_clk,
 input wbm_rst,
 input [ADDR_WIDTH-1:0] wbm_adr_i,
 input [DATA_WIDTH-1:0] wbm_dat_i,
 input wbm_we_i,
 input [SELECT_WIDTH-1:0] wbm_sel_i,
 input wbm_stb_i,
 input wbm_cyc_i,
 input wbs_clk,
 input wbs_rst,
 input [DATA_WIDTH-1:0] wbs_dat_i,
 input wbs_ack_i,
 input wbs_err_i,
 input wbs_rty_i,
 output [DATA_WIDTH-1:0] wbm_dat_o,
 output wbm_ack_o,
 output wbm_err_o,
 output wbm_rty_o,
 output [ADDR_WIDTH-1:0] wbs_adr_o,
 output [DATA_WIDTH-1:0] wbs_dat_o,
 output wbs_we_o,
 output [SELECT_WIDTH-1:0] wbs_sel_o,
 output wbs_stb_o,
 output wbs_cyc_o
);
 //@include wb_async_reg.v
 
 wb_async_reg #(
   .DATA_WIDTH(DATA_WIDTH),
   .ADDR_WIDTH(ADDR_WIDTH),
   .SELECT_WIDTH(SELECT_WIDTH)
 ) u_wb_async_reg (
   .wbm_clk(wbm_clk),
   .wbm_rst(wbm_rst),
   .wbm_adr_i(wbm_adr_i),
   .wbm_dat_i(wbm_dat_i),
   .wbm_dat_o(wbm_dat_o),
   .wbm_we_i(wbm_we_i),
   .wbm_sel_i(wbm_sel_i),
   .wbm_stb_i(wbm_stb_i),
   .wbm_ack_o(wbm_ack_o),
   .wbm_err_o(wbm_err_o),
   .wbm_rty_o(wbm_rty_o),
   .wbm_cyc_i(wbm_cyc_i),
   .wbs_clk(wbs_clk),
   .wbs_rst(wbs_rst),
   .wbs_adr_o(wbs_adr_o),
   .wbs_dat_i(wbs_dat_i),
   .wbs_dat_o(wbs_dat_o),
   .wbs_we_o(wbs_we_o),
   .wbs_sel_o(wbs_sel_o),
   .wbs_stb_o(wbs_stb_o),
   .wbs_ack_i(wbs_ack_i),
   .wbs_err_i(wbs_err_i),
   .wbs_rty_i(wbs_rty_i),
   .wbs_cyc_o(wbs_cyc_o)
 );
 
endmodule

module VGA_640x480_PLL (
 input clk_24m_in,
 output clk_25m_out
);
 wire w0;
 wire w1;
 assign w0 = clk_24m_in;
 assign clk_25m_out = w1;
 VGA_640x480_PLL_code_2 v7942d2 (
  .clk_24m(w0),
  .clk_25m(w1)
 );
endmodule

module VGA_640x480_PLL_code_2 (
 input clk_24m,
 output clk_25m
);
 wire clk0_buf;
 wire clk0_out;
 
 EG_LOGIC_BUFG bufg_feedback( .i(clk0_buf), .o(clk0_out) );
 
 EG_PHY_PLL #(.DPHASE_SOURCE("DISABLE"),
 	.DYNCFG("DISABLE"),
 	.FIN("24.000"),
 	.FEEDBK_MODE("NORMAL"),
 	.FEEDBK_PATH("CLKC0_EXT"),
 	.STDBY_ENABLE("DISABLE"),
 	.PLLRST_ENA("DISABLE"),
 	.SYNC_ENABLE("DISABLE"),
 	.DERIVE_PLL_CLOCKS("DISABLE"),
 	.GEN_BASIC_CLOCK("DISABLE"),
 	.GMC_GAIN(6),
 	.ICP_CURRENT(3),
 	.KVCO(6),
 	.LPF_CAPACITOR(3),
 	.LPF_RESISTOR(2),
 	.REFCLK_DIV(12),
 	.FBCLK_DIV(67),
 	.CLKC0_ENABLE("ENABLE"),
 	.CLKC0_DIV(3),
 	.CLKC0_CPHASE(2),
 	.CLKC0_FPHASE(0),
 	.CLKC1_ENABLE("ENABLE"),
 	.CLKC1_DIV(16),
 	.CLKC1_CPHASE(15),
 	.CLKC1_FPHASE(0)	)
 pll_inst (.refclk(clk_24m),
 	.reset(1'b0),
 	.stdby(1'b0),
 	.extlock(open),
 	.psclk(1'b0),
 	.psdown(1'b0),
 	.psstep(1'b0),
 	.psclksel(3'b000),
 	.psdone(open),
 	.dclk(1'b0),
 	.dcs(1'b0),
 	.dwe(1'b0),
 	.di(8'b00000000),
 	.daddr(6'b000000),
 	.do({open, open, open, open, open, open, open, open}),
 	.fbclk(clk0_out),
 	.clkc({open, open, open, clk_25m, clk0_buf}));
 	
 
endmodule

module Video_System_PLL_For_EG4 (
 input clk_24m_in,
 output clk_60m_out,
 output clk_80m_out
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = clk_24m_in;
 assign clk_60m_out = w1;
 assign clk_80m_out = w2;
 Video_System_PLL_For_EG4_code_3 v942924 (
  .clk_24m(w0),
  .clk_60m(w1),
  .clk_80m(w2)
 );
endmodule

module Video_System_PLL_For_EG4_code_3 (
 input clk_24m,
 output clk_60m,
 output clk_80m
);
 wire clk0_out;
 wire clk1_out;
  
 wire clk0_buf;
  
 EG_LOGIC_BUFG bufg_feedback( .i(clk0_buf), .o(clk0_out) );
  
 EG_PHY_PLL #(.DPHASE_SOURCE("DISABLE"),
 	.DYNCFG("DISABLE"),
 	.FIN("24.000"),
 	.FEEDBK_MODE("NORMAL"),
 	.FEEDBK_PATH("CLKC0_EXT"),
 	.STDBY_ENABLE("DISABLE"),
 	.PLLRST_ENA("DISABLE"),
 	.SYNC_ENABLE("DISABLE"),
 	.DERIVE_PLL_CLOCKS("DISABLE"),
 	.GEN_BASIC_CLOCK("DISABLE"),
  	.GMC_GAIN(6),
 	.ICP_CURRENT(3),
 	.KVCO(6),
 	.LPF_CAPACITOR(3),
 	.LPF_RESISTOR(2),
 	.REFCLK_DIV(3),
 	.FBCLK_DIV(10),
 	.CLKC0_ENABLE("ENABLE"),
 	.CLKC0_DIV(12),
 	.CLKC0_CPHASE(11),
 	.CLKC0_FPHASE(0),
 	.CLKC1_ENABLE("ENABLE"),
 	.CLKC1_DIV(16),
 	.CLKC1_CPHASE(15),
 	.CLKC1_FPHASE(0)	)
 pll_inst (.refclk(clk_24m),
  	.reset(1'b0),
  	.stdby(1'b0),
  	.extlock(open),
  	.psclk(1'b0),
  	.psdown(1'b0),
  	.psstep(1'b0),
  	.psclksel(3'b000),
  	.psdone(open),
  	.dclk(1'b0),
  	.dcs(1'b0),
  	.dwe(1'b0),
  	.di(8'b00000000),
  	.daddr(6'b000000),
  	.do({open, open, open, open, open, open, open, open}),
  	.fbclk(clk0_out),
  	.clkc({open, open, open, clk1_out, clk0_buf}));
  	
 assign clk_80m = clk0_out;
 assign clk_60m = clk1_out;
endmodule

module NOT (
 input in_0,
 output out_1
);
 wire w0;
 wire w1;
 assign w0 = in_0;
 assign out_1 = w1;
 NOT_code_2 vd54ca1 (
  .a(w0),
  .c(w1)
 );
endmodule

module NOT_code_2 (
 input a,
 output c
);
 // NOT logic gate
 
 assign c = ~ a;
endmodule
